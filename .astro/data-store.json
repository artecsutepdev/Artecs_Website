[["Map",1,2,9,10,28,29],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.5","content-config-digest","ddfa9594dadc6143","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.artecs.org/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[\"artecs.org\"],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[null,[null,{\"behavior\":\"wrap\",\"properties\":{\"className\":[\"not-prose\"]}}],[null,{\"rel\":[\"noreferrer\",\"noopener\"],\"target\":\"_blank\"}],null,[null,{\"styleOverrides\":{\"borderRadius\":\"4px\",\"codeFontFamily\":\"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace;\",\"codeFontSize\":\"0.875rem\",\"codeLineHeight\":\"1.7142857rem\",\"codePaddingInline\":\"1rem\",\"frames\":{\"frameBoxShadowCssValue\":\"none\"},\"uiLineHeight\":\"inherit\"},\"themes\":[\"dracula\",\"github-light\"],\"useThemedScrollbars\":false}]],\"remarkRehype\":{\"footnoteLabelProperties\":{\"className\":[\"\"]}},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{\"WEBMENTION_API_KEY\":{\"context\":\"server\",\"access\":\"secret\",\"optional\":true,\"type\":\"string\"},\"WEBMENTION_URL\":{\"context\":\"client\",\"access\":\"public\",\"optional\":true,\"type\":\"string\"},\"WEBMENTION_PINGBACK\":{\"context\":\"client\",\"access\":\"public\",\"optional\":true,\"type\":\"string\"}},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","note",["Map",11,12],"welcome",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"rendered":20},{"title":14,"description":15,"publishDate":16},"Welcome to Our Website!","Stay updated with weekly announcements and exciting events",["Date","2025-02-06T15:00:00.000Z"],"Hi, Hello!\nThis is where we’ll be posting announcements for our weekly meetings and sharing exciting updates. Stay tuned for the latest news and happenings!","src/content/note/welcome.md","95b44231095394df",{"html":21,"metadata":22},"\u003Cp>Hi, Hello!\nThis is where we’ll be posting announcements for our weekly meetings and sharing exciting updates. Stay tuned for the latest news and happenings!\u003C/p>",{"headings":23,"imagePaths":24,"frontmatter":25},[],[],{"title":14,"description":15,"publishDate":26,"readingTime":27},"2025-02-06T15:00:00Z","1 min read","post",["Map",30,31,85,86,204,205,272,273,357,358,399,400,453,454],"game-engines-intro",{"id":30,"data":32,"body":46,"filePath":47,"assetImports":48,"digest":51,"rendered":52},{"title":33,"description":34,"category":35,"coverImage":36,"draft":39,"ogImage":40,"tags":41,"publishDate":45},"Godot [1]: What Are Game Engines?","Exploring game engines, their role in development, and why Godot is a great choice.","Game Development",{"alt":37,"src":38},"Engines Logo","__ASTRO_IMAGE_./logo.png",false,"./logo.png",[42,43,44],"project-g","gamedev","godot",["Date","2025-02-07T07:00:00.000Z"],"## What Is a Game Engine?\r\n\r\nA **game engine** is a software framework that provides essential tools to create video games. Instead of programming everything from scratch, developers use a game engine to handle key aspects of a game, such as:\r\n\r\n- **Rendering** – Drawing graphics on the screen.\r\n- **Physics** – Simulating motion and collisions.\r\n- **Input Handling** – Processing keyboard, mouse, or controller inputs.\r\n- **Audio** – Managing sounds and music.\r\n- **Scripting** – Defining game logic using code.\r\n\r\nUsing a game engine allows developers to focus on designing gameplay rather than reinventing the wheel for every new project.\r\n\r\n![1](./1.png)\r\n\r\n:::note[Why Use a Game Engine?]\r\nGame engines streamline the development process by providing a structured environment. Without one, developers would have to manually code every aspect of a game, from physics to rendering—a time-consuming task. Instead, engines like **Godot, Unity, and Unreal Engine** offer built-in tools to speed up development.\r\n:::\r\n\r\n### Benefits of Using a Game Engine\r\n\r\n✅ **Cross-platform support** –> Build games for PC, consoles, and mobile devices.\r\n\r\n✅ **Optimized performance** –> Engines handle rendering and physics efficiently.\r\n\r\n✅ **User-friendly editors** –> Visual tools help with game design.\r\n\r\n✅ **Active communities** –> Access documentation, tutorials, and forums for help.\r\n\r\n## What Is Godot?\r\n\r\n[**Godot**](https://godotengine.org/) is an **open-source** game engine known for its flexibility and ease of use. Unlike proprietary engines, Godot is completely free with no licensing fees, making it an excellent choice for indie developers and hobbyists.\r\n\r\n### Key Features of Godot 🏆\r\n\r\n- **Node-based architecture** –> Organize game elements intuitively.\r\n- **GDScript** –> A simple yet powerful scripting language inspired by Python.\r\n- **2D & 3D support** –> Develop both 2D and 3D games efficiently.\r\n- **Lightweight & Fast** – Minimal system requirements with a small installation size.\r\n- **Active Development** –> Constant updates and community-driven improvements.\r\n\r\n![2](./2.png)\r\n\r\n:::important\r\nUnlike other engines, Godot does not charge royalties or require subscriptions. You own everything you create without hidden costs.\r\n:::\r\n\r\n## Godot in Action 🎥\r\n\r\nTo see what’s possible with Godot, check out the **Godot 2024 Showreel**, showcasing some of the best games made with this engine:\r\n\r\n\u003Ciframe \r\n    src=\"https://www.youtube.com/embed/n1Lon_Q2T18\" \r\n    title=\"Godot 2024 Showreel\" \r\n    frameborder=\"0\" \r\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n    allowfullscreen \r\n    width=\"100%\" \r\n    height=\"315\">\r\n\u003C/iframe>\r\n\r\n## Final Thoughts\r\n\r\nGame engines empower developers to bring their ideas to life without reinventing core technologies. **Godot**, with its open-source nature and beginner-friendly design, is an excellent starting point for new game developers while still being powerful enough for complex projects.\r\n\r\n## What’s Next?\r\n\r\nIn the next sections, we’ll discuss:\r\n\r\n👉 [**Learning Godot - Beginner Tutorial**](https://www.artecs.org/posts/godot-intro/)\r\n\r\nRead the previous section:\r\n\r\n👉 [**Introduction to Game Development**](https://www.artecs.org/posts/game-dev-intro/)\r\n\r\n:::important\r\nStay tuned and keep experimenting!\r\n:::\r\n\r\nPost by: Gabriel Alonso","src/content/post/game-engines-intro/index.md",[49,50,40],"./1.png","./2.png","dd4d42c8e95a47ac",{"html":53,"metadata":54},"\u003Ch2 id=\"what-is-a-game-engine\">\u003Ca class=\"not-prose\" href=\"#what-is-a-game-engine\">What Is a Game Engine?\u003C/a>\u003C/h2>\n\u003Cp>A \u003Cstrong>game engine\u003C/strong> is a software framework that provides essential tools to create video games. Instead of programming everything from scratch, developers use a game engine to handle key aspects of a game, such as:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rendering\u003C/strong> – Drawing graphics on the screen.\u003C/li>\n\u003Cli>\u003Cstrong>Physics\u003C/strong> – Simulating motion and collisions.\u003C/li>\n\u003Cli>\u003Cstrong>Input Handling\u003C/strong> – Processing keyboard, mouse, or controller inputs.\u003C/li>\n\u003Cli>\u003Cstrong>Audio\u003C/strong> – Managing sounds and music.\u003C/li>\n\u003Cli>\u003Cstrong>Scripting\u003C/strong> – Defining game logic using code.\u003C/li>\n\u003C/ul>\n\u003Cp>Using a game engine allows developers to focus on designing gameplay rather than reinventing the wheel for every new project.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./1.png&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"Why Use a Game Engine?\" class=\"admonition\" data-admonition-type=\"note\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">Why Use a Game Engine?\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Game engines streamline the development process by providing a structured environment. Without one, developers would have to manually code every aspect of a game, from physics to rendering—a time-consuming task. Instead, engines like \u003Cstrong>Godot, Unity, and Unreal Engine\u003C/strong> offer built-in tools to speed up development.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"benefits-of-using-a-game-engine\">\u003Ca class=\"not-prose\" href=\"#benefits-of-using-a-game-engine\">Benefits of Using a Game Engine\u003C/a>\u003C/h3>\n\u003Cp>✅ \u003Cstrong>Cross-platform support\u003C/strong> –> Build games for PC, consoles, and mobile devices.\u003C/p>\n\u003Cp>✅ \u003Cstrong>Optimized performance\u003C/strong> –> Engines handle rendering and physics efficiently.\u003C/p>\n\u003Cp>✅ \u003Cstrong>User-friendly editors\u003C/strong> –> Visual tools help with game design.\u003C/p>\n\u003Cp>✅ \u003Cstrong>Active communities\u003C/strong> –> Access documentation, tutorials, and forums for help.\u003C/p>\n\u003Ch2 id=\"what-is-godot\">\u003Ca class=\"not-prose\" href=\"#what-is-godot\">What Is Godot?\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://godotengine.org/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Godot\u003C/strong>\u003C/a> is an \u003Cstrong>open-source\u003C/strong> game engine known for its flexibility and ease of use. Unlike proprietary engines, Godot is completely free with no licensing fees, making it an excellent choice for indie developers and hobbyists.\u003C/p>\n\u003Ch3 id=\"key-features-of-godot\">\u003Ca class=\"not-prose\" href=\"#key-features-of-godot\">Key Features of Godot 🏆\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Node-based architecture\u003C/strong> –> Organize game elements intuitively.\u003C/li>\n\u003Cli>\u003Cstrong>GDScript\u003C/strong> –> A simple yet powerful scripting language inspired by Python.\u003C/li>\n\u003Cli>\u003Cstrong>2D &#x26; 3D support\u003C/strong> –> Develop both 2D and 3D games efficiently.\u003C/li>\n\u003Cli>\u003Cstrong>Lightweight &#x26; Fast\u003C/strong> – Minimal system requirements with a small installation size.\u003C/li>\n\u003Cli>\u003Cstrong>Active Development\u003C/strong> –> Constant updates and community-driven improvements.\u003C/li>\n\u003C/ul>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./2.png&#x22;,&#x22;alt&#x22;:&#x22;2&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Unlike other engines, Godot does not charge royalties or require subscriptions. You own everything you create without hidden costs.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"godot-in-action\">\u003Ca class=\"not-prose\" href=\"#godot-in-action\">Godot in Action 🎥\u003C/a>\u003C/h2>\n\u003Cp>To see what’s possible with Godot, check out the \u003Cstrong>Godot 2024 Showreel\u003C/strong>, showcasing some of the best games made with this engine:\u003C/p>\n\u003Ciframe src=\"https://www.youtube.com/embed/n1Lon_Q2T18\" title=\"Godot 2024 Showreel\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen width=\"100%\" height=\"315\">\n\u003C/iframe>\n\u003Ch2 id=\"final-thoughts\">\u003Ca class=\"not-prose\" href=\"#final-thoughts\">Final Thoughts\u003C/a>\u003C/h2>\n\u003Cp>Game engines empower developers to bring their ideas to life without reinventing core technologies. \u003Cstrong>Godot\u003C/strong>, with its open-source nature and beginner-friendly design, is an excellent starting point for new game developers while still being powerful enough for complex projects.\u003C/p>\n\u003Ch2 id=\"whats-next\">\u003Ca class=\"not-prose\" href=\"#whats-next\">What’s Next?\u003C/a>\u003C/h2>\n\u003Cp>In the next sections, we’ll discuss:\u003C/p>\n\u003Cp>👉 \u003Ca href=\"https://www.artecs.org/posts/godot-intro/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Learning Godot - Beginner Tutorial\u003C/strong>\u003C/a>\u003C/p>\n\u003Cp>Read the previous section:\u003C/p>\n\u003Cp>👉 \u003Ca href=\"https://www.artecs.org/posts/game-dev-intro/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Introduction to Game Development\u003C/strong>\u003C/a>\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Stay tuned and keep experimenting!\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Post by: Gabriel Alonso\u003C/p>",{"headings":55,"imagePaths":79,"frontmatter":80},[56,60,64,67,70,73,76],{"depth":57,"slug":58,"text":59},2,"what-is-a-game-engine","What Is a Game Engine?",{"depth":61,"slug":62,"text":63},3,"benefits-of-using-a-game-engine","Benefits of Using a Game Engine",{"depth":57,"slug":65,"text":66},"what-is-godot","What Is Godot?",{"depth":61,"slug":68,"text":69},"key-features-of-godot","Key Features of Godot 🏆",{"depth":57,"slug":71,"text":72},"godot-in-action","Godot in Action 🎥",{"depth":57,"slug":74,"text":75},"final-thoughts","Final Thoughts",{"depth":57,"slug":77,"text":78},"whats-next","What’s Next?",[49,50],{"title":33,"description":34,"publishDate":81,"category":35,"tags":82,"coverImage":83,"ogImage":40,"readingTime":84},"7 Feb 2025",[42,43,44],{"src":40,"alt":37},"2 min read","microcontroller-workshop",{"id":85,"data":87,"body":101,"filePath":102,"assetImports":103,"digest":131,"rendered":132},{"title":88,"description":89,"category":90,"coverImage":91,"draft":39,"ogImage":40,"tags":93,"publishDate":100},"Micro Controller Workshop for Beginners","Learn to make your own smart devices with Micro Controllers. From using the hardware to the software.","Electronics",{"alt":92,"src":38},"Pixel Art Cover",[94,95,96,97,98,99],"microcontroller","arduino","esp32","electronics","sculpture","automation",["Date","2025-05-01T06:00:00.000Z"],"## **Mircrocontroller Workshop for Beginners**\n\nA microcontroller is a programmable Circuit Board comprised of the necessary components to perform basic I/O operations.​ It's primarilly used for:\n\n- Sensor data gathering​\n- Simple information processing​\n- Control external Devices (Servos, Leds, Buzzers, etc.)\n\nIt is designed for low power and simple operations.\n\n### SBC vs MCU\n\nMicro Controller Units (MCU's) are often confused with Single Board Computers (SBC's). Even though they perform similar functions, they have some differences that are highlighted here:\n\n- **SBC: Single Board Computer ​**\n  - Higher Power​\n  - Can Run an OS​\n  - All soldered into a single board​\n- **MCU: Micro Controller Unit​**\n  - Simple I/O Operations​\n  - IOT devices​\n  - Low power automation\n\n### Examples\n\nFor Microcontrollers, some of the most well known are Arduino, ESP32, and ATmega. For SBC's we have the famous Raspberry Pi.\n![Arduino](image.png)\n![ESP](image-1.png)\n![ATmega](image-2.png)\n![PI](image-4.png)\n\n### Spec Sheets\n\nWhen using a Micro Controller, it's very important that you know the specs of it (e.g. voltages, power supply, I/O pinout, architecture) in order to build your devices or work with your software.\n[HERE](https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf) is an ecample of the one for the ESP32.\nThese are useful, but they may be a bit to much for our purpose. For that, we use this.\n![ESP32 pinout](image-5.png)\nThis pinout diagram tells us how we can connect our devices into the board to start controlling them. Here's an easy guide for you:\n\n- The **black** pins marked with **GND** are for **Ground**.\n- The **red** pins marked with **VIN, 3.3V**, or in some boards with **5V** (not available for ESP32) are the power supply.\n- The **Purple ones** that say **GPIO#** are the pins where you can receive and send signals with the Micro controller from external devices.\n\n### Hardware components\n\nNow, we'll go over some hardware components useful for creating your projects. It's nothing very advances, but they're the building blocks of electronics.\n\n#### LEDS\n\n![LED](image-6.png)\n\nLEDs are simple electricity to light converters. They're usually great for your project to see if something is on, of or in a specific status. Be careful, cause their current is unidirectional, meaning that you wire them the wrong way and you can fry them, the image above displays how it works, but we'll do an exercise with one later. Also, you'll need a 330 Ohms resistor to avoid burning the LED out.\n\n#### Resistors\n\n![REsistors](image-7.png)\n\nThese components limit the flow of current in a circuit. The resistance is measured in Ohms, and to determine how much resistance does a resistor provide, you can base it on the image above. It's commonly used in circuits to protect circuits from too much current, but because of it's properties, it has been found that it can be also used as a heat source.\n\n##### Capacitors\n\n![Capacitors](image-8.png)\n\nThis is a brief storage unit which allows to provide energy to sections where the initial source may be limited to providing because of design constraints. As you may see in the image, there are several types, but we won't go into detail of which one does what (those are plans for next semester). You can measure a capacitors capacity in Farads (F), but it's usually measured in microfarads.\n\n#### Diodes\n\n![Diodes](image-9.png)\n\nThe diodes are current rectifiers. In other words, it allows current to flow in a single direction. These are designed to not fail if you reverse the voltage.\n\n#### Inductors\n\n![Inductor](image-10.png)\n\nThey're similar to capacitors, but the difference is that they store their energy in the form of magnetic current, which is measured in Henries (H).\n\n#### Transistors\n\nThe building blocks of computers. These are switches that turn on/off with the use of voltage or current. There are 2 types:\n\n##### Mosfets\n\n![Mosfet](image-11.png)\n\nThese switches are controlled by voltage and generally faster. These are usually for power electronics and digital logic.\n\n##### BJT's\n\n![BJT](image-12.png)\n\nThese switches are controlled by curren, and they're slower than mosfets. These are more for analog cicuits.\n\n#### Sensors\n\n![sensors](image-13.png)\n\nThese devices come in multiple flavors, sounds, colors, etc. Or well, at least they can detect them and translate them into something an electronic device can understand (usually a computer). These, once processed by the computer, can be used to produce output. We will be using a simple sensor for this workshop.\n\n#### Shields\n\n![shields](image-14.png)\n\nDon't build from scratch, use a shield​! Shields are a set of components easily connectable to a micro controller board​. These include screens, other controllers, buttons, etc.\n\n### Breadboards\n\nBreadboards are useful tools when developing electronics. INstead of having to solder and desolder, you can simply prototype with this great tool and some jumper wires.\n\n![Breadboard full](image-16.png)\n\nAs you may see in the folloowing image, breadboards have 6 columns:\n\n- 2 **positives** on the very outside (red)\n- 2 **negatives** next to the positives (blue)\n- 2 for **device connections** (wide columns in the middle)\n\n![diagram](image-18.png)\n\nYou can just simply connect your negative and your positive source into the side columns, and wire from there to the rest of the positives and negatives in the circuit so you don't have many connections to the source.\nFor the remaining connections between devices and to the outer columns, they can be done in the middle columns. If you want a better understanding on how this diagram works, you can refer to the following image, where you can see an open breadboard.\n\n![breadboard open](image-20.png)\n\n### First Exersice\n\nHere, we will teach you the most basic example for how to use a Micro Controller with an ESP32 and a LED.\n\n#### Connections\n\n![CONNECTION 1](image-15.png)\n\n1. We'll connect the shorter leg of an ESP to a GND PIN (-).\n2. Then we'll connect a 330 Ohm resistor to pin 3 (TX0) on the board.\n3. Finally, we'll connect the positive (+) leg,or long leg, of the leg to the other side of the resistor.\n\n#### Setting up your development environment\n\n![arduino ide logo](image-21.png)\n\n:::note\nFor the following part, you'll need a USB cable to connect the ESP32 to your PC (Check the connection of your ESP32 if it needs micro USB, USB-B or USB-C).\n:::\n\nYou must go to [this website](https://www.arduino.cc/en/software/) and install it for your OS.\n\nOnce installed, you should see a screen like this\n\n![ino screen](image-22.png)\n\nHere you see a few key components that'll help you start developing.\n\n1. Your code editor to develop your code\n\n![code editor](image-23.png)\n\n2. The output window, where any output related to program compilation is displayed (ie. error and success messages).\n\n![output](image-24.png)\n\n3. The serial console, where all data received from the microcontroller shall be displayed.\n\n![serial](image-25.png)\n\n4. The compile (checkmark) to compile your code (translate it into machine-readable code) and the upload button (To upload your code to the board)\n\n![buttons](image-26.png)\n\n5. The library manager, to install and uninstall libraries.\n\n![lib man](image-27.png)\n\n6. The boards manager to select your board and download its respective libraries to work with the code.\n\n![board man](image-28.png)\n\n7. And the board selection dropdown.\n\n![board sel](image-29.png)\n\n##### Connecting the board\n\nTo start, just connect your board via USB or USB-C to your computer.\n\nOnce connected, the board shall be recognized by the Arduino IDE, if not, go through the next steps.\n\n\nPost by: **Rafael Garcia**","src/content/post/microcontroller-workshop/index.md",[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,40],"image.png","image-1.png","image-2.png","image-4.png","image-5.png","image-6.png","image-7.png","image-8.png","image-9.png","image-10.png","image-11.png","image-12.png","image-13.png","image-14.png","image-16.png","image-18.png","image-20.png","image-15.png","image-21.png","image-22.png","image-23.png","image-24.png","image-25.png","image-26.png","image-27.png","image-28.png","image-29.png","cf6ab8cac8d35ce0",{"html":133,"metadata":134},"\u003Ch2 id=\"mircrocontroller-workshop-for-beginners\">\u003Ca class=\"not-prose\" href=\"#mircrocontroller-workshop-for-beginners\">\u003Cstrong>Mircrocontroller Workshop for Beginners\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>A microcontroller is a programmable Circuit Board comprised of the necessary components to perform basic I/O operations.​ It’s primarilly used for:\u003C/p>\n\u003Cul>\n\u003Cli>Sensor data gathering​\u003C/li>\n\u003Cli>Simple information processing​\u003C/li>\n\u003Cli>Control external Devices (Servos, Leds, Buzzers, etc.)\u003C/li>\n\u003C/ul>\n\u003Cp>It is designed for low power and simple operations.\u003C/p>\n\u003Ch3 id=\"sbc-vs-mcu\">\u003Ca class=\"not-prose\" href=\"#sbc-vs-mcu\">SBC vs MCU\u003C/a>\u003C/h3>\n\u003Cp>Micro Controller Units (MCU’s) are often confused with Single Board Computers (SBC’s). Even though they perform similar functions, they have some differences that are highlighted here:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>SBC: Single Board Computer ​\u003C/strong>\n\u003Cul>\n\u003Cli>Higher Power​\u003C/li>\n\u003Cli>Can Run an OS​\u003C/li>\n\u003Cli>All soldered into a single board​\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>MCU: Micro Controller Unit​\u003C/strong>\n\u003Cul>\n\u003Cli>Simple I/O Operations​\u003C/li>\n\u003Cli>IOT devices​\u003C/li>\n\u003Cli>Low power automation\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"examples\">\u003Ca class=\"not-prose\" href=\"#examples\">Examples\u003C/a>\u003C/h3>\n\u003Cp>For Microcontrollers, some of the most well known are Arduino, ESP32, and ATmega. For SBC’s we have the famous Raspberry Pi.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image.png&#x22;,&#x22;alt&#x22;:&#x22;Arduino&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-1.png&#x22;,&#x22;alt&#x22;:&#x22;ESP&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-2.png&#x22;,&#x22;alt&#x22;:&#x22;ATmega&#x22;,&#x22;index&#x22;:0}\">\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-4.png&#x22;,&#x22;alt&#x22;:&#x22;PI&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch3 id=\"spec-sheets\">\u003Ca class=\"not-prose\" href=\"#spec-sheets\">Spec Sheets\u003C/a>\u003C/h3>\n\u003Cp>When using a Micro Controller, it’s very important that you know the specs of it (e.g. voltages, power supply, I/O pinout, architecture) in order to build your devices or work with your software.\n\u003Ca href=\"https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf\" rel=\"noreferrer noopener\" target=\"_blank\">HERE\u003C/a> is an ecample of the one for the ESP32.\nThese are useful, but they may be a bit to much for our purpose. For that, we use this.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-5.png&#x22;,&#x22;alt&#x22;:&#x22;ESP32 pinout&#x22;,&#x22;index&#x22;:0}\">\nThis pinout diagram tells us how we can connect our devices into the board to start controlling them. Here’s an easy guide for you:\u003C/p>\n\u003Cul>\n\u003Cli>The \u003Cstrong>black\u003C/strong> pins marked with \u003Cstrong>GND\u003C/strong> are for \u003Cstrong>Ground\u003C/strong>.\u003C/li>\n\u003Cli>The \u003Cstrong>red\u003C/strong> pins marked with \u003Cstrong>VIN, 3.3V\u003C/strong>, or in some boards with \u003Cstrong>5V\u003C/strong> (not available for ESP32) are the power supply.\u003C/li>\n\u003Cli>The \u003Cstrong>Purple ones\u003C/strong> that say \u003Cstrong>GPIO#\u003C/strong> are the pins where you can receive and send signals with the Micro controller from external devices.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"hardware-components\">\u003Ca class=\"not-prose\" href=\"#hardware-components\">Hardware components\u003C/a>\u003C/h3>\n\u003Cp>Now, we’ll go over some hardware components useful for creating your projects. It’s nothing very advances, but they’re the building blocks of electronics.\u003C/p>\n\u003Ch4 id=\"leds\">\u003Ca class=\"not-prose\" href=\"#leds\">LEDS\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-6.png&#x22;,&#x22;alt&#x22;:&#x22;LED&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>LEDs are simple electricity to light converters. They’re usually great for your project to see if something is on, of or in a specific status. Be careful, cause their current is unidirectional, meaning that you wire them the wrong way and you can fry them, the image above displays how it works, but we’ll do an exercise with one later. Also, you’ll need a 330 Ohms resistor to avoid burning the LED out.\u003C/p>\n\u003Ch4 id=\"resistors\">\u003Ca class=\"not-prose\" href=\"#resistors\">Resistors\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-7.png&#x22;,&#x22;alt&#x22;:&#x22;REsistors&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>These components limit the flow of current in a circuit. The resistance is measured in Ohms, and to determine how much resistance does a resistor provide, you can base it on the image above. It’s commonly used in circuits to protect circuits from too much current, but because of it’s properties, it has been found that it can be also used as a heat source.\u003C/p>\n\u003Ch5 id=\"capacitors\">\u003Ca class=\"not-prose\" href=\"#capacitors\">Capacitors\u003C/a>\u003C/h5>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-8.png&#x22;,&#x22;alt&#x22;:&#x22;Capacitors&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>This is a brief storage unit which allows to provide energy to sections where the initial source may be limited to providing because of design constraints. As you may see in the image, there are several types, but we won’t go into detail of which one does what (those are plans for next semester). You can measure a capacitors capacity in Farads (F), but it’s usually measured in microfarads.\u003C/p>\n\u003Ch4 id=\"diodes\">\u003Ca class=\"not-prose\" href=\"#diodes\">Diodes\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-9.png&#x22;,&#x22;alt&#x22;:&#x22;Diodes&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>The diodes are current rectifiers. In other words, it allows current to flow in a single direction. These are designed to not fail if you reverse the voltage.\u003C/p>\n\u003Ch4 id=\"inductors\">\u003Ca class=\"not-prose\" href=\"#inductors\">Inductors\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-10.png&#x22;,&#x22;alt&#x22;:&#x22;Inductor&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>They’re similar to capacitors, but the difference is that they store their energy in the form of magnetic current, which is measured in Henries (H).\u003C/p>\n\u003Ch4 id=\"transistors\">\u003Ca class=\"not-prose\" href=\"#transistors\">Transistors\u003C/a>\u003C/h4>\n\u003Cp>The building blocks of computers. These are switches that turn on/off with the use of voltage or current. There are 2 types:\u003C/p>\n\u003Ch5 id=\"mosfets\">\u003Ca class=\"not-prose\" href=\"#mosfets\">Mosfets\u003C/a>\u003C/h5>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-11.png&#x22;,&#x22;alt&#x22;:&#x22;Mosfet&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>These switches are controlled by voltage and generally faster. These are usually for power electronics and digital logic.\u003C/p>\n\u003Ch5 id=\"bjts\">\u003Ca class=\"not-prose\" href=\"#bjts\">BJT’s\u003C/a>\u003C/h5>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-12.png&#x22;,&#x22;alt&#x22;:&#x22;BJT&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>These switches are controlled by curren, and they’re slower than mosfets. These are more for analog cicuits.\u003C/p>\n\u003Ch4 id=\"sensors\">\u003Ca class=\"not-prose\" href=\"#sensors\">Sensors\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-13.png&#x22;,&#x22;alt&#x22;:&#x22;sensors&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>These devices come in multiple flavors, sounds, colors, etc. Or well, at least they can detect them and translate them into something an electronic device can understand (usually a computer). These, once processed by the computer, can be used to produce output. We will be using a simple sensor for this workshop.\u003C/p>\n\u003Ch4 id=\"shields\">\u003Ca class=\"not-prose\" href=\"#shields\">Shields\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-14.png&#x22;,&#x22;alt&#x22;:&#x22;shields&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>Don’t build from scratch, use a shield​! Shields are a set of components easily connectable to a micro controller board​. These include screens, other controllers, buttons, etc.\u003C/p>\n\u003Ch3 id=\"breadboards\">\u003Ca class=\"not-prose\" href=\"#breadboards\">Breadboards\u003C/a>\u003C/h3>\n\u003Cp>Breadboards are useful tools when developing electronics. INstead of having to solder and desolder, you can simply prototype with this great tool and some jumper wires.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-16.png&#x22;,&#x22;alt&#x22;:&#x22;Breadboard full&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>As you may see in the folloowing image, breadboards have 6 columns:\u003C/p>\n\u003Cul>\n\u003Cli>2 \u003Cstrong>positives\u003C/strong> on the very outside (red)\u003C/li>\n\u003Cli>2 \u003Cstrong>negatives\u003C/strong> next to the positives (blue)\u003C/li>\n\u003Cli>2 for \u003Cstrong>device connections\u003C/strong> (wide columns in the middle)\u003C/li>\n\u003C/ul>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-18.png&#x22;,&#x22;alt&#x22;:&#x22;diagram&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>You can just simply connect your negative and your positive source into the side columns, and wire from there to the rest of the positives and negatives in the circuit so you don’t have many connections to the source.\nFor the remaining connections between devices and to the outer columns, they can be done in the middle columns. If you want a better understanding on how this diagram works, you can refer to the following image, where you can see an open breadboard.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-20.png&#x22;,&#x22;alt&#x22;:&#x22;breadboard open&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch3 id=\"first-exersice\">\u003Ca class=\"not-prose\" href=\"#first-exersice\">First Exersice\u003C/a>\u003C/h3>\n\u003Cp>Here, we will teach you the most basic example for how to use a Micro Controller with an ESP32 and a LED.\u003C/p>\n\u003Ch4 id=\"connections\">\u003Ca class=\"not-prose\" href=\"#connections\">Connections\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-15.png&#x22;,&#x22;alt&#x22;:&#x22;CONNECTION 1&#x22;,&#x22;index&#x22;:0}\">\n\u003Col>\n\u003Cli>We’ll connect the shorter leg of an ESP to a GND PIN (-).\u003C/li>\n\u003Cli>Then we’ll connect a 330 Ohm resistor to pin 3 (TX0) on the board.\u003C/li>\n\u003Cli>Finally, we’ll connect the positive (+) leg,or long leg, of the leg to the other side of the resistor.\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"setting-up-your-development-environment\">\u003Ca class=\"not-prose\" href=\"#setting-up-your-development-environment\">Setting up your development environment\u003C/a>\u003C/h4>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-21.png&#x22;,&#x22;alt&#x22;:&#x22;arduino ide logo&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"note\" class=\"admonition\" data-admonition-type=\"note\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">note\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>For the following part, you’ll need a USB cable to connect the ESP32 to your PC (Check the connection of your ESP32 if it needs micro USB, USB-B or USB-C).\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>You must go to \u003Ca href=\"https://www.arduino.cc/en/software/\" rel=\"noreferrer noopener\" target=\"_blank\">this website\u003C/a> and install it for your OS.\u003C/p>\n\u003Cp>Once installed, you should see a screen like this\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-22.png&#x22;,&#x22;alt&#x22;:&#x22;ino screen&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>Here you see a few key components that’ll help you start developing.\u003C/p>\n\u003Col>\n\u003Cli>Your code editor to develop your code\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-23.png&#x22;,&#x22;alt&#x22;:&#x22;code editor&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"2\">\n\u003Cli>The output window, where any output related to program compilation is displayed (ie. error and success messages).\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-24.png&#x22;,&#x22;alt&#x22;:&#x22;output&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"3\">\n\u003Cli>The serial console, where all data received from the microcontroller shall be displayed.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-25.png&#x22;,&#x22;alt&#x22;:&#x22;serial&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"4\">\n\u003Cli>The compile (checkmark) to compile your code (translate it into machine-readable code) and the upload button (To upload your code to the board)\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-26.png&#x22;,&#x22;alt&#x22;:&#x22;buttons&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"5\">\n\u003Cli>The library manager, to install and uninstall libraries.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-27.png&#x22;,&#x22;alt&#x22;:&#x22;lib man&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"6\">\n\u003Cli>The boards manager to select your board and download its respective libraries to work with the code.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-28.png&#x22;,&#x22;alt&#x22;:&#x22;board man&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"7\">\n\u003Cli>And the board selection dropdown.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;image-29.png&#x22;,&#x22;alt&#x22;:&#x22;board sel&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch5 id=\"connecting-the-board\">\u003Ca class=\"not-prose\" href=\"#connecting-the-board\">Connecting the board\u003C/a>\u003C/h5>\n\u003Cp>To start, just connect your board via USB or USB-C to your computer.\u003C/p>\n\u003Cp>Once connected, the board shall be recognized by the Arduino IDE, if not, go through the next steps.\u003C/p>\n\u003Cp>Post by: \u003Cstrong>Rafael Garcia\u003C/strong>\u003C/p>",{"headings":135,"imagePaths":198,"frontmatter":199},[136,139,142,145,148,151,155,158,162,165,168,171,174,177,180,183,186,189,192,195],{"depth":57,"slug":137,"text":138},"mircrocontroller-workshop-for-beginners","Mircrocontroller Workshop for Beginners",{"depth":61,"slug":140,"text":141},"sbc-vs-mcu","SBC vs MCU",{"depth":61,"slug":143,"text":144},"examples","Examples",{"depth":61,"slug":146,"text":147},"spec-sheets","Spec Sheets",{"depth":61,"slug":149,"text":150},"hardware-components","Hardware components",{"depth":152,"slug":153,"text":154},4,"leds","LEDS",{"depth":152,"slug":156,"text":157},"resistors","Resistors",{"depth":159,"slug":160,"text":161},5,"capacitors","Capacitors",{"depth":152,"slug":163,"text":164},"diodes","Diodes",{"depth":152,"slug":166,"text":167},"inductors","Inductors",{"depth":152,"slug":169,"text":170},"transistors","Transistors",{"depth":159,"slug":172,"text":173},"mosfets","Mosfets",{"depth":159,"slug":175,"text":176},"bjts","BJT’s",{"depth":152,"slug":178,"text":179},"sensors","Sensors",{"depth":152,"slug":181,"text":182},"shields","Shields",{"depth":61,"slug":184,"text":185},"breadboards","Breadboards",{"depth":61,"slug":187,"text":188},"first-exersice","First Exersice",{"depth":152,"slug":190,"text":191},"connections","Connections",{"depth":152,"slug":193,"text":194},"setting-up-your-development-environment","Setting up your development environment",{"depth":159,"slug":196,"text":197},"connecting-the-board","Connecting the board",[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],{"title":88,"description":89,"publishDate":200,"category":90,"tags":201,"coverImage":202,"ogImage":40,"readingTime":203},"1 May 2025",[94,95,96,97,98,99],{"src":40,"alt":92},"6 min read","pixel-art-intro",{"id":204,"data":206,"body":214,"filePath":215,"assetImports":216,"digest":228,"rendered":229},{"title":207,"description":208,"category":209,"coverImage":210,"draft":39,"ogImage":40,"tags":211,"publishDate":213},"Introduction to Pixel Art","Learn the basics of pixel art, from using Piskel to creating your first sprite and simple animation.","Creative Programming",{"alt":92,"src":38},[212],"pixel-art",["Date","2025-03-27T06:00:00.000Z"],"## **Introduction to Pixel Art**\n\nPixel art is a **form of digital art** created by placing individual pixels in a way that resembles the aesthetics of **8-bit or 16-bit games**. Even with modern technology, pixel art remains popular for its **retro charm** and for the unique **restrictions** it places on size and color palettes.\n\n:::note\nDespite its name, “pixel art” doesn’t always strictly use **literal pixels**—the style and techniques can be applied at any resolution.  \n:::\n\n## **Getting Started with Piskel**\n\n[Piskel](https://www.piskelapp.com/) is an **online application** designed for creating pixel art and sprites. Its intuitive interface and straightforward tools make it an excellent place to begin exploring pixel art.  \n\nIf you’re looking for an alternative, [Pixelorama](https://orama-interactive.itch.io/pixelorama) is another great option.\n\n![1](./1.gif)\n\n### **Piskel Tools Overview**\n\n![2](./2.png)\n\nBelow are some essential tools you’ll find in Piskel:\n\n- **Pen Tool** – Basic brush for freehand pixel drawing.  \n- **Paint Bucket** – Fills a continuous area with the selected color.  \n- **Eraser** – Removes pixels, acting as a basic erasing tool.  \n- **Rectangle Tool** – Draws rectangles of any size.  \n- **Move Tool** – Moves selected parts of the drawing around the canvas.  \n- **Rectangle Selection** – Selects a rectangular area for editing or moving.  \n- **Lighten Tool** – Lightens or darkens an area with brush strokes.  \n- **Color Picker** – Selects a color from the canvas to add to your palette.  \n- **Vertical Mirror Pen** – Mirrors brush strokes across the y-axis for symmetrical designs.  \n- **Paint Bucket (Fill Similar Colors)** – Fills all pixels of the same color in the canvas with a new color.  \n- **Stroke Tool** – Draws straight lines between two points.  \n- **Circle Tool** – Creates perfect or elliptical circle shapes.  \n- **Shape Selection** – Selects a continuous colored area for editing or moving.  \n- **Lasso Selection** – Allows freeform selection of any area, regardless of shape. \n- **Dithering Tool** – Applies a pixelated shading effect for smoother gradients and textures.\n\n## **Color in Pixel Art**\n\n![3](./3.png)\n\nColor choices in pixel art can drastically affect your final design.  \n\n:::important\n1. **Color Square**: Familiarize yourself with it—this is where you’ll pick and tweak your colors.  \n2. **Color Palette**: A curated palette keeps your work consistent. You can use Piskel’s default palette or import your own.  \n3. **Shading**: For each color, use at least **three shades**—base color, darker shade (shadow), and lighter shade (highlight).  \n4. **Fewer Colors**: Smaller pixel art typically looks cleaner with fewer colors.\n:::\n\n### **Shifting Tones**\n- **Darker colors** tend to shift toward the **blue** spectrum.  \n- **Lighter colors** lean closer to the **yellow** spectrum.  \n\nThis subtle shift can add more depth to your shading and make your sprite more visually interesting.\n\n## **Line Style**\n\nWhen drawing lines in pixel art, you’ll notice they can appear thicker than usual. Here are some pointers:\n\n![4](./4.png)\n\n1. **Avoid sharp corners**: Single-pixel corners can make lines look bulky.  \n2. **Experiment with styles**: Some art styles use these “bulky” corners intentionally for a bold look.  \n3. **Stay consistent**: If you choose a particular line style, apply it throughout your artwork.\n\n## **Activity: Creating Your First Sprite**\n\nLet’s make a simple **slime** sprite to get you started!\n\n1. **Choose a base color**: Select a bright color for your slime.  \n2. **Draw a circle**: Use the **Pen** or **Circle Tool** to create a rough circular shape.  \n3. **Fill the circle**: Use the **Paint Bucket** to fill it with your chosen color.\n\n![5](./5.png)\n\n4. **Add an outline**: Pick a darker shade (or black) and outline the slime to give it definition.  \n5. **Draw eyes**: Switch to black or another dark color to create two simple eyes.\n\n![6](./6.png)\n\n6. **Highlight & shade**: Use slightly lighter and darker tones of your base color to give the slime a 3D look.\n\n![7](./7.png)\n\n:::note\nRemember: If you want a **darker** color, shift closer to **blue**. For a **lighter** color, shift closer to **yellow**.\n:::\n\n## **Animating Your Pixel Art**\n\nPixel art animation involves drawing each **frame** to simulate movement. Each new frame is a small change from the previous one, creating the **illusion of motion** when played in sequence.\n\n### **Key Aspects of Pixel Art Animation**\n\n- **Frame-by-Frame Movement**: Manually drawn frames ensure control over every detail.  \n- **Keyframes & In-Between Frames**: Major poses vs. minor transitions.  \n- **Limited Frames**: Embrace a retro aesthetic or keep animations simple.  \n- **Subtle Changes**: Even tiny pixel shifts can create expressive, fluid animations.  \n- **Consistent Color & Shading**: Keep your palette and shading style consistent across frames.\n\n### **Activity: Simple Slime Animation**\n\nLet’s animate our slime with a **simple “bounce”** effect:\n\n1. **Duplicate the frame**: In Piskel, hover over your frame and select “Duplicate.”  \n2. **Select & move**: Use the **Rectangle Selection** tool to select the top half of the slime. Press **Shift** as you drag it up or down.\n\n![8](./8.png)\n\n3. **Fill gaps**: Fill any missing areas with the appropriate colors.\n\n![9](./9.png)\n\n4. **Preview**: Check the animation on the **top-right preview panel**. Adjust the **FPS** (frames per second) to control speed.  \n\n![10](./10.png)\n\n:::important\nIf the animation is too fast or too slow, adjust the **FPS** slider. Experiment until you find a speed that looks just right.\n:::\n\n### **Exporting Your Animation**\n\nIn Piskel, you can export your animation as a **GIF** or **PNG** sequence:\n\n1. Click the **export icon** on the right edge of the screen.  \n2. **Download the GIF** or generate a **URL** to share it online.\n\n![11](./11.png)\n\n3. Use the **scale slider** if you want a larger or smaller final image.\n\n![12](./12.png)\n\n---\n\n## **Final Thoughts**\n\nPixel art offers a **fun, approachable** way to learn about color, shading, and animation—without the complexity of larger-scale digital illustrations. By **practicing** simple shapes, **experimenting** with color shifts, and **creating basic animations**, you’ll gain a strong foundation in this retro-inspired art form.\n\n🎨 **Next Steps?**  \n- **Experiment** with different sprites: characters, objects, or environment tiles.  \n- **Add more frames** to your animation for smoother motion.  \n- **Try out dithering** for shading and texture variations.\n\n:::important\nKeep practicing! Pixel art is all about **patience** and **iteration**. The more you experiment, the more you’ll develop your own style.\n:::\n\nPost by: **Mauricio Rojo**","src/content/post/pixel-art-intro/index.md",[217,50,218,219,220,221,222,223,224,225,226,227,40],"./1.gif","./3.png","./4.png","./5.png","./6.png","./7.png","./8.png","./9.png","./10.png","./11.png","./12.png","7b53528359ccc9b1",{"html":230,"metadata":231},"\u003Ch2 id=\"introduction-to-pixel-art\">\u003Ca class=\"not-prose\" href=\"#introduction-to-pixel-art\">\u003Cstrong>Introduction to Pixel Art\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Pixel art is a \u003Cstrong>form of digital art\u003C/strong> created by placing individual pixels in a way that resembles the aesthetics of \u003Cstrong>8-bit or 16-bit games\u003C/strong>. Even with modern technology, pixel art remains popular for its \u003Cstrong>retro charm\u003C/strong> and for the unique \u003Cstrong>restrictions\u003C/strong> it places on size and color palettes.\u003C/p>\n\u003Caside aria-label=\"note\" class=\"admonition\" data-admonition-type=\"note\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">note\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Despite its name, “pixel art” doesn’t always strictly use \u003Cstrong>literal pixels\u003C/strong>—the style and techniques can be applied at any resolution.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"getting-started-with-piskel\">\u003Ca class=\"not-prose\" href=\"#getting-started-with-piskel\">\u003Cstrong>Getting Started with Piskel\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.piskelapp.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Piskel\u003C/a> is an \u003Cstrong>online application\u003C/strong> designed for creating pixel art and sprites. Its intuitive interface and straightforward tools make it an excellent place to begin exploring pixel art.\u003C/p>\n\u003Cp>If you’re looking for an alternative, \u003Ca href=\"https://orama-interactive.itch.io/pixelorama\" rel=\"noreferrer noopener\" target=\"_blank\">Pixelorama\u003C/a> is another great option.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./1.gif&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch3 id=\"piskel-tools-overview\">\u003Ca class=\"not-prose\" href=\"#piskel-tools-overview\">\u003Cstrong>Piskel Tools Overview\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./2.png&#x22;,&#x22;alt&#x22;:&#x22;2&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>Below are some essential tools you’ll find in Piskel:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Pen Tool\u003C/strong> – Basic brush for freehand pixel drawing.\u003C/li>\n\u003Cli>\u003Cstrong>Paint Bucket\u003C/strong> – Fills a continuous area with the selected color.\u003C/li>\n\u003Cli>\u003Cstrong>Eraser\u003C/strong> – Removes pixels, acting as a basic erasing tool.\u003C/li>\n\u003Cli>\u003Cstrong>Rectangle Tool\u003C/strong> – Draws rectangles of any size.\u003C/li>\n\u003Cli>\u003Cstrong>Move Tool\u003C/strong> – Moves selected parts of the drawing around the canvas.\u003C/li>\n\u003Cli>\u003Cstrong>Rectangle Selection\u003C/strong> – Selects a rectangular area for editing or moving.\u003C/li>\n\u003Cli>\u003Cstrong>Lighten Tool\u003C/strong> – Lightens or darkens an area with brush strokes.\u003C/li>\n\u003Cli>\u003Cstrong>Color Picker\u003C/strong> – Selects a color from the canvas to add to your palette.\u003C/li>\n\u003Cli>\u003Cstrong>Vertical Mirror Pen\u003C/strong> – Mirrors brush strokes across the y-axis for symmetrical designs.\u003C/li>\n\u003Cli>\u003Cstrong>Paint Bucket (Fill Similar Colors)\u003C/strong> – Fills all pixels of the same color in the canvas with a new color.\u003C/li>\n\u003Cli>\u003Cstrong>Stroke Tool\u003C/strong> – Draws straight lines between two points.\u003C/li>\n\u003Cli>\u003Cstrong>Circle Tool\u003C/strong> – Creates perfect or elliptical circle shapes.\u003C/li>\n\u003Cli>\u003Cstrong>Shape Selection\u003C/strong> – Selects a continuous colored area for editing or moving.\u003C/li>\n\u003Cli>\u003Cstrong>Lasso Selection\u003C/strong> – Allows freeform selection of any area, regardless of shape.\u003C/li>\n\u003Cli>\u003Cstrong>Dithering Tool\u003C/strong> – Applies a pixelated shading effect for smoother gradients and textures.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"color-in-pixel-art\">\u003Ca class=\"not-prose\" href=\"#color-in-pixel-art\">\u003Cstrong>Color in Pixel Art\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./3.png&#x22;,&#x22;alt&#x22;:&#x22;3&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>Color choices in pixel art can drastically affect your final design.\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Col>\n\u003Cli>\u003Cstrong>Color Square\u003C/strong>: Familiarize yourself with it—this is where you’ll pick and tweak your colors.\u003C/li>\n\u003Cli>\u003Cstrong>Color Palette\u003C/strong>: A curated palette keeps your work consistent. You can use Piskel’s default palette or import your own.\u003C/li>\n\u003Cli>\u003Cstrong>Shading\u003C/strong>: For each color, use at least \u003Cstrong>three shades\u003C/strong>—base color, darker shade (shadow), and lighter shade (highlight).\u003C/li>\n\u003Cli>\u003Cstrong>Fewer Colors\u003C/strong>: Smaller pixel art typically looks cleaner with fewer colors.\u003C/li>\n\u003C/ol>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"shifting-tones\">\u003Ca class=\"not-prose\" href=\"#shifting-tones\">\u003Cstrong>Shifting Tones\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Darker colors\u003C/strong> tend to shift toward the \u003Cstrong>blue\u003C/strong> spectrum.\u003C/li>\n\u003Cli>\u003Cstrong>Lighter colors\u003C/strong> lean closer to the \u003Cstrong>yellow\u003C/strong> spectrum.\u003C/li>\n\u003C/ul>\n\u003Cp>This subtle shift can add more depth to your shading and make your sprite more visually interesting.\u003C/p>\n\u003Ch2 id=\"line-style\">\u003Ca class=\"not-prose\" href=\"#line-style\">\u003Cstrong>Line Style\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>When drawing lines in pixel art, you’ll notice they can appear thicker than usual. Here are some pointers:\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./4.png&#x22;,&#x22;alt&#x22;:&#x22;4&#x22;,&#x22;index&#x22;:0}\">\n\u003Col>\n\u003Cli>\u003Cstrong>Avoid sharp corners\u003C/strong>: Single-pixel corners can make lines look bulky.\u003C/li>\n\u003Cli>\u003Cstrong>Experiment with styles\u003C/strong>: Some art styles use these “bulky” corners intentionally for a bold look.\u003C/li>\n\u003Cli>\u003Cstrong>Stay consistent\u003C/strong>: If you choose a particular line style, apply it throughout your artwork.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"activity-creating-your-first-sprite\">\u003Ca class=\"not-prose\" href=\"#activity-creating-your-first-sprite\">\u003Cstrong>Activity: Creating Your First Sprite\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Let’s make a simple \u003Cstrong>slime\u003C/strong> sprite to get you started!\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Choose a base color\u003C/strong>: Select a bright color for your slime.\u003C/li>\n\u003Cli>\u003Cstrong>Draw a circle\u003C/strong>: Use the \u003Cstrong>Pen\u003C/strong> or \u003Cstrong>Circle Tool\u003C/strong> to create a rough circular shape.\u003C/li>\n\u003Cli>\u003Cstrong>Fill the circle\u003C/strong>: Use the \u003Cstrong>Paint Bucket\u003C/strong> to fill it with your chosen color.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./5.png&#x22;,&#x22;alt&#x22;:&#x22;5&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"4\">\n\u003Cli>\u003Cstrong>Add an outline\u003C/strong>: Pick a darker shade (or black) and outline the slime to give it definition.\u003C/li>\n\u003Cli>\u003Cstrong>Draw eyes\u003C/strong>: Switch to black or another dark color to create two simple eyes.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./6.png&#x22;,&#x22;alt&#x22;:&#x22;6&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"6\">\n\u003Cli>\u003Cstrong>Highlight &#x26; shade\u003C/strong>: Use slightly lighter and darker tones of your base color to give the slime a 3D look.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./7.png&#x22;,&#x22;alt&#x22;:&#x22;7&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"note\" class=\"admonition\" data-admonition-type=\"note\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">note\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Remember: If you want a \u003Cstrong>darker\u003C/strong> color, shift closer to \u003Cstrong>blue\u003C/strong>. For a \u003Cstrong>lighter\u003C/strong> color, shift closer to \u003Cstrong>yellow\u003C/strong>.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"animating-your-pixel-art\">\u003Ca class=\"not-prose\" href=\"#animating-your-pixel-art\">\u003Cstrong>Animating Your Pixel Art\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Pixel art animation involves drawing each \u003Cstrong>frame\u003C/strong> to simulate movement. Each new frame is a small change from the previous one, creating the \u003Cstrong>illusion of motion\u003C/strong> when played in sequence.\u003C/p>\n\u003Ch3 id=\"key-aspects-of-pixel-art-animation\">\u003Ca class=\"not-prose\" href=\"#key-aspects-of-pixel-art-animation\">\u003Cstrong>Key Aspects of Pixel Art Animation\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Frame-by-Frame Movement\u003C/strong>: Manually drawn frames ensure control over every detail.\u003C/li>\n\u003Cli>\u003Cstrong>Keyframes &#x26; In-Between Frames\u003C/strong>: Major poses vs. minor transitions.\u003C/li>\n\u003Cli>\u003Cstrong>Limited Frames\u003C/strong>: Embrace a retro aesthetic or keep animations simple.\u003C/li>\n\u003Cli>\u003Cstrong>Subtle Changes\u003C/strong>: Even tiny pixel shifts can create expressive, fluid animations.\u003C/li>\n\u003Cli>\u003Cstrong>Consistent Color &#x26; Shading\u003C/strong>: Keep your palette and shading style consistent across frames.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"activity-simple-slime-animation\">\u003Ca class=\"not-prose\" href=\"#activity-simple-slime-animation\">\u003Cstrong>Activity: Simple Slime Animation\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>Let’s animate our slime with a \u003Cstrong>simple “bounce”\u003C/strong> effect:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Duplicate the frame\u003C/strong>: In Piskel, hover over your frame and select “Duplicate.”\u003C/li>\n\u003Cli>\u003Cstrong>Select &#x26; move\u003C/strong>: Use the \u003Cstrong>Rectangle Selection\u003C/strong> tool to select the top half of the slime. Press \u003Cstrong>Shift\u003C/strong> as you drag it up or down.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./8.png&#x22;,&#x22;alt&#x22;:&#x22;8&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"3\">\n\u003Cli>\u003Cstrong>Fill gaps\u003C/strong>: Fill any missing areas with the appropriate colors.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./9.png&#x22;,&#x22;alt&#x22;:&#x22;9&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"4\">\n\u003Cli>\u003Cstrong>Preview\u003C/strong>: Check the animation on the \u003Cstrong>top-right preview panel\u003C/strong>. Adjust the \u003Cstrong>FPS\u003C/strong> (frames per second) to control speed.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./10.png&#x22;,&#x22;alt&#x22;:&#x22;10&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>If the animation is too fast or too slow, adjust the \u003Cstrong>FPS\u003C/strong> slider. Experiment until you find a speed that looks just right.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"exporting-your-animation\">\u003Ca class=\"not-prose\" href=\"#exporting-your-animation\">\u003Cstrong>Exporting Your Animation\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>In Piskel, you can export your animation as a \u003Cstrong>GIF\u003C/strong> or \u003Cstrong>PNG\u003C/strong> sequence:\u003C/p>\n\u003Col>\n\u003Cli>Click the \u003Cstrong>export icon\u003C/strong> on the right edge of the screen.\u003C/li>\n\u003Cli>\u003Cstrong>Download the GIF\u003C/strong> or generate a \u003Cstrong>URL\u003C/strong> to share it online.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./11.png&#x22;,&#x22;alt&#x22;:&#x22;11&#x22;,&#x22;index&#x22;:0}\">\n\u003Col start=\"3\">\n\u003Cli>Use the \u003Cstrong>scale slider\u003C/strong> if you want a larger or smaller final image.\u003C/li>\n\u003C/ol>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./12.png&#x22;,&#x22;alt&#x22;:&#x22;12&#x22;,&#x22;index&#x22;:0}\">\n\u003Chr>\n\u003Ch2 id=\"final-thoughts\">\u003Ca class=\"not-prose\" href=\"#final-thoughts\">\u003Cstrong>Final Thoughts\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Pixel art offers a \u003Cstrong>fun, approachable\u003C/strong> way to learn about color, shading, and animation—without the complexity of larger-scale digital illustrations. By \u003Cstrong>practicing\u003C/strong> simple shapes, \u003Cstrong>experimenting\u003C/strong> with color shifts, and \u003Cstrong>creating basic animations\u003C/strong>, you’ll gain a strong foundation in this retro-inspired art form.\u003C/p>\n\u003Cp>🎨 \u003Cstrong>Next Steps?\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Experiment\u003C/strong> with different sprites: characters, objects, or environment tiles.\u003C/li>\n\u003Cli>\u003Cstrong>Add more frames\u003C/strong> to your animation for smoother motion.\u003C/li>\n\u003Cli>\u003Cstrong>Try out dithering\u003C/strong> for shading and texture variations.\u003C/li>\n\u003C/ul>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Keep practicing! Pixel art is all about \u003Cstrong>patience\u003C/strong> and \u003Cstrong>iteration\u003C/strong>. The more you experiment, the more you’ll develop your own style.\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Post by: \u003Cstrong>Mauricio Rojo\u003C/strong>\u003C/p>",{"headings":232,"imagePaths":266,"frontmatter":267},[233,235,238,241,244,247,250,253,256,259,262,265],{"depth":57,"slug":234,"text":207},"introduction-to-pixel-art",{"depth":57,"slug":236,"text":237},"getting-started-with-piskel","Getting Started with Piskel",{"depth":61,"slug":239,"text":240},"piskel-tools-overview","Piskel Tools Overview",{"depth":57,"slug":242,"text":243},"color-in-pixel-art","Color in Pixel Art",{"depth":61,"slug":245,"text":246},"shifting-tones","Shifting Tones",{"depth":57,"slug":248,"text":249},"line-style","Line Style",{"depth":57,"slug":251,"text":252},"activity-creating-your-first-sprite","Activity: Creating Your First Sprite",{"depth":57,"slug":254,"text":255},"animating-your-pixel-art","Animating Your Pixel Art",{"depth":61,"slug":257,"text":258},"key-aspects-of-pixel-art-animation","Key Aspects of Pixel Art Animation",{"depth":61,"slug":260,"text":261},"activity-simple-slime-animation","Activity: Simple Slime Animation",{"depth":61,"slug":263,"text":264},"exporting-your-animation","Exporting Your Animation",{"depth":57,"slug":74,"text":75},[217,50,218,219,220,221,222,223,224,225,226,227],{"title":207,"description":208,"publishDate":268,"category":209,"tags":269,"coverImage":270,"ogImage":40,"readingTime":271},"27 Mar 2025",[212],{"src":40,"alt":92},"5 min read","ui-ux-principles",{"id":272,"data":274,"body":282,"filePath":283,"assetImports":284,"digest":298,"rendered":299},{"title":275,"description":276,"category":209,"coverImage":277,"draft":39,"ogImage":40,"tags":279,"publishDate":281},"UI / UX Principles","Learn the fundamentals of UI/UX design, from user flows to wireframes and design systems.",{"alt":278,"src":38},"Principles Logo",[280],"ui/ux",["Date","2025-03-20T06:00:00.000Z"],"## **UI/UX Design: Where to Start?**  \n\nHow do you go from tools to **designing real products**? UI design tools are easy to learn but hard to master. The key is **knowing what you need to do** to make user-friendly and visually appealing designs.  \n\n:::note\nThis post breaks down the **fundamentals** of UI/UX design: **user flow**, **wireframing**, **design systems**, and **actual UI design**.  \n:::\n\n## **Step 1: Understanding User Flow 📍**  \n\nBefore designing, you need to map out **how users will navigate** your product. Users visit your website, app, or game with a goal—whether it's **finding information, purchasing something, or interacting with a service**.  \n\nA **user flow diagram** helps visualize their journey. For example, in a website design project, if users are meant to find design inspirations, the **user flow** ensures they quickly locate categories and content.  \n\n![User Flow](./user-flow.jpeg)\n\nThis **Ecommerce Checkout User Flow** visually represents the steps a user takes when purchasing a product online. The flow starts when a **customer visits the shop’s website** and navigates to a **product detail page**. If they decide to **add the item to the cart**, they proceed to the **checkout page**.\n\nAt checkout, the user is asked whether they have an account:\n- **If they do**, they log in.\n- **If they don’t**, they enter their details manually.\n\nOnce customer details are verified, they proceed to the **payment gateway**. If the payment is successful, the order is confirmed. If unsuccessful, the process may need to be retried.\n\n### **User Flow in Game Design 🎮**  \n\nLet’s see how user flow applies to **game design** by looking at a typical **level progression system** in a game:  \n\n1️⃣ **Menu Screen** –> The player starts at the main menu, where they can navigate options like “Start Game,” “Settings,” or “Load Game.”\n\n![game1](./game1.png)\n\n2️⃣ **Hub Area** –> Many games feature a hub world where players can explore, manage inventory, or select missions.\n\n![game2](./game2.png)\n\n3️⃣ **Select Level** –> Players choose a level from a list, a map, or an interactive world.\n\n![game3](./game3.png)\n\n4️⃣ **Watch Cutscene** –> If the game has a story-driven experience, players might watch a cutscene before gameplay begins.  \n\n![game4](./game4.png)\n\n5️⃣ **Play Level** –> The player engages in the core gameplay, completing objectives or challenges.  \n\n![game5](./game5.png)\n\nThis structured approach ensures players **intuitively progress** through the game without confusion.  \n\n:::important\nUser flow in games helps designers plan **smooth and engaging player experiences**, making sure transitions between **menus, levels, and gameplay** feel **natural and seamless**.\n:::\n\n## **Step 2: Wireframing 📝**  \n\nOnce the user flow is clear, the next step is **wireframing** (a blueprint of your design). Each screen or page should contribute to **achieving the user’s goal**.  \n\nBack in the **1600s** (okay, not really), wireframing was done with pen and paper. Today, tools like [**Balsamiq**](https://balsamiq.com/) or [**Figma**](https://www.figma.com/) make the process digital.\n\n:::important\nFor a simple, intuitive UI, wireframes should focus on **structure, navigation, and key interactions**\n:::\n\n### **Types of Wireframing**  \nWireframing is divided into three levels based on detail and complexity:  \n\n🔹 **Low-Fidelity Wireframes:** Simple sketches or digital outlines. You can even use **pen and paper** to start visualizing your layout. These focus on structure without detailing visuals.  \n![wireframe1](./wireframe1.png)\n\n🔹 **Medium-Fidelity Wireframes:** More refined than low-fidelity, incorporating **clearer layouts and basic UI elements**. These are often done digitally but lack final design details.  \n![wireframe2](./wireframe2.jpeg)\n\n🔹 **High-Fidelity Wireframes:** **Closer to the final design**, including **refined UI elements, typography, and accurate spacing**. These wireframes resemble the finished product but lack full interactivity.\n![wireframe3](./wireframe33.webp)\n\n## **Step 3: Creating a Design System 🎨**  \n\nThis marks the beginning of **UI (User Interface) design**, where we bring **visual consistency** to the project. A **design system** ensures that colors, fonts, buttons, and icons are **uniform** across the product.  \n\n### **Color & Typography**  \n**Fonts** define the **tone** of your design. Want something formal? Elegant? Playful? Try out fonts from [**Google Fonts**](https://fonts.google.com/) and use tools like [**Type Scale**](https://typescale.com/) to set readable text sizes.\n\n![typo](./typo.png)  \n\n**Color** schemes should align with **brand identity** or project goals. Dark mode? Minimalist? Vibrant? Use **contrast and accessibility checks** to make sure users can read text clearly. Use tools like [**colorhunt**](https://colorhunt.co/) to find cool color palletes!\n\n### **Primary, Secondary & Accent Colors**  \n- **Primary Color** –> The **main color** of the design, often used for branding, key UI elements, and major CTAs (Call-To-Action buttons).  \n- **Secondary Color** –> A supporting color used for **contrast or differentiation**, such as secondary buttons or highlights.  \n- **Accent Color** –> Used sparingly for emphasis, alerts, or **attention-grabbing elements**.  \n\n### **Contrast & Typography**  \nContrast plays a critical role in **readability** and **accessibility**.  \n- **High contrast** (e.g., dark text on a light background) improves readability and accessibility.  \n- **Low contrast** can be used for subtle UI elements but should **never compromise legibility**.  \n\n![Contrast & Typography](./tandc.jpeg)\n\n### **Applying Color in UI**  \n✅ **60-30-10 Rule**:  \n\n![Colors Percetange](./colorspercetange.jpeg)\n\n### **Activity: Realtime Colors 🖌️**  \n\n:::important\nNow that you understand **user flow, wireframing and design systems**, it's time to **put it all into practice**!  \n:::\nA great tool to experiment with **color palettes, contrast, and real-time UI updates** is **[Realtime Colors](https://www.realtimecolors.com/)**.  \n\n☐ **Test different primary, secondary, and accent colors** in a live UI.  \n☐ **Check contrast & readability** to ensure accessibility.  \n☐ **See instant previews** of how your colors affect the overall design.\n\n## **Step 4: The Actual UI Design 🎨🔥**  \n\nNow that you have your **building blocks**, it's time to design! Keep these **six key UI/UX principles** in mind:  \n\n1️⃣ **Visual Hierarchy** –> Prioritize important elements.  \n2️⃣ **Contrast** –> Make text readable.  \n3️⃣ **Balance** –> Space elements evenly.  \n4️⃣ **Consistency** –> Keep styles uniform.  \n5️⃣ **Simplicity** –> Avoid unnecessary clutter.  \n6️⃣ **Interaction Feedback** – Show responses to user actions.  \n\n### **Prototyping & Testing**  \nUI design isn’t just assembling elements—it’s about **testing, iterating, and refining** the design. Prototyping in **Figma or Adobe XD** helps visualize user interactions before development.  \n\n![Click](./clickk.gif)\n\n### **Activity: Create a Homepage! 🎨**\n\n:::important\nNow that you have experimented at previous **Realtime Colors** activity, it’s time for a hands-on challenge: **design a UI homepage** for a website! This activity will help you apply everything you’ve learned about **User Flow, Wireframing, Colors, and UI**.  \n:::\n\n#### **📌 Activity Instructions:**  \n1️⃣ **Use Google Slides** to design a homepage layout.  \n2️⃣ Apply the **color palette** you created in [Realtime Colors](https://www.realtimecolors.com/).  \n3️⃣ Incorporate UI/UX principles like **visual hierarchy, contrast, and consistency**.  \n4️⃣ Use **Google Slides default fonts** to keep it simple and accessible.  \n5️⃣ Keep in mind **user experience**—the layout should be intuitive and visually appealing.  \n\nYour homepage could be for:  \n**A portfolio website** (showcasing design work).  \n**An e-commerce site** (featuring a product or brand).  \n**A tech startup** (introducing a product or service).  \n**A blog or news site** (highlighting content).  \n**A landing page for an event** (conference, workshop, or course).  \n\n#### **🔍 Finding Inspiration**  \nNot sure where to start? Look for **real-world examples** and **designs** at:  \n👉 [Dribbble](https://dribbble.com/)  \n👉 [Pinterest](https://www.pinterest.com/)  \n\n💡 **Use keywords like:**  \n🔹 **UI/UX**  \n🔹 **Website design**  \n🔹 **Website color palette**  \n\n---\n\n## **Final Thoughts**  \n\nGreat UI/UX design isn’t about making things look pretty—it’s about **guiding users effortlessly** through an experience. From mapping out user journeys to fine-tuning colors and typography, the key is **designing with purpose**.  \n\n🎨 **Next Steps?** \nStart experimenting! Try designing your first UI prototype in **Figma**, apply these principles, and refine your skills.  \n\n\n:::important\nStay tuned for upcoming posts! \n:::\n\nPost by: Artecs 2025 Team","src/content/post/ui-ux-principles/index.md",[285,286,287,288,289,290,291,292,293,294,295,296,297,40],"./user-flow.jpeg","./game1.png","./game2.png","./game3.png","./game4.png","./game5.png","./wireframe1.png","./wireframe2.jpeg","./wireframe33.webp","./typo.png","./tandc.jpeg","./colorspercetange.jpeg","./clickk.gif","f29a895653e89160",{"html":300,"metadata":301},"\u003Ch2 id=\"uiux-design-where-to-start\">\u003Ca class=\"not-prose\" href=\"#uiux-design-where-to-start\">\u003Cstrong>UI/UX Design: Where to Start?\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>How do you go from tools to \u003Cstrong>designing real products\u003C/strong>? UI design tools are easy to learn but hard to master. The key is \u003Cstrong>knowing what you need to do\u003C/strong> to make user-friendly and visually appealing designs.\u003C/p>\n\u003Caside aria-label=\"note\" class=\"admonition\" data-admonition-type=\"note\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">note\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>This post breaks down the \u003Cstrong>fundamentals\u003C/strong> of UI/UX design: \u003Cstrong>user flow\u003C/strong>, \u003Cstrong>wireframing\u003C/strong>, \u003Cstrong>design systems\u003C/strong>, and \u003Cstrong>actual UI design\u003C/strong>.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"step-1-understanding-user-flow\">\u003Ca class=\"not-prose\" href=\"#step-1-understanding-user-flow\">\u003Cstrong>Step 1: Understanding User Flow 📍\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Before designing, you need to map out \u003Cstrong>how users will navigate\u003C/strong> your product. Users visit your website, app, or game with a goal—whether it’s \u003Cstrong>finding information, purchasing something, or interacting with a service\u003C/strong>.\u003C/p>\n\u003Cp>A \u003Cstrong>user flow diagram\u003C/strong> helps visualize their journey. For example, in a website design project, if users are meant to find design inspirations, the \u003Cstrong>user flow\u003C/strong> ensures they quickly locate categories and content.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./user-flow.jpeg&#x22;,&#x22;alt&#x22;:&#x22;User Flow&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>This \u003Cstrong>Ecommerce Checkout User Flow\u003C/strong> visually represents the steps a user takes when purchasing a product online. The flow starts when a \u003Cstrong>customer visits the shop’s website\u003C/strong> and navigates to a \u003Cstrong>product detail page\u003C/strong>. If they decide to \u003Cstrong>add the item to the cart\u003C/strong>, they proceed to the \u003Cstrong>checkout page\u003C/strong>.\u003C/p>\n\u003Cp>At checkout, the user is asked whether they have an account:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>If they do\u003C/strong>, they log in.\u003C/li>\n\u003Cli>\u003Cstrong>If they don’t\u003C/strong>, they enter their details manually.\u003C/li>\n\u003C/ul>\n\u003Cp>Once customer details are verified, they proceed to the \u003Cstrong>payment gateway\u003C/strong>. If the payment is successful, the order is confirmed. If unsuccessful, the process may need to be retried.\u003C/p>\n\u003Ch3 id=\"user-flow-in-game-design\">\u003Ca class=\"not-prose\" href=\"#user-flow-in-game-design\">\u003Cstrong>User Flow in Game Design 🎮\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>Let’s see how user flow applies to \u003Cstrong>game design\u003C/strong> by looking at a typical \u003Cstrong>level progression system\u003C/strong> in a game:\u003C/p>\n\u003Cp>1️⃣ \u003Cstrong>Menu Screen\u003C/strong> –> The player starts at the main menu, where they can navigate options like “Start Game,” “Settings,” or “Load Game.”\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./game1.png&#x22;,&#x22;alt&#x22;:&#x22;game1&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>2️⃣ \u003Cstrong>Hub Area\u003C/strong> –> Many games feature a hub world where players can explore, manage inventory, or select missions.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./game2.png&#x22;,&#x22;alt&#x22;:&#x22;game2&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>3️⃣ \u003Cstrong>Select Level\u003C/strong> –> Players choose a level from a list, a map, or an interactive world.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./game3.png&#x22;,&#x22;alt&#x22;:&#x22;game3&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>4️⃣ \u003Cstrong>Watch Cutscene\u003C/strong> –> If the game has a story-driven experience, players might watch a cutscene before gameplay begins.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./game4.png&#x22;,&#x22;alt&#x22;:&#x22;game4&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>5️⃣ \u003Cstrong>Play Level\u003C/strong> –> The player engages in the core gameplay, completing objectives or challenges.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./game5.png&#x22;,&#x22;alt&#x22;:&#x22;game5&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>This structured approach ensures players \u003Cstrong>intuitively progress\u003C/strong> through the game without confusion.\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>User flow in games helps designers plan \u003Cstrong>smooth and engaging player experiences\u003C/strong>, making sure transitions between \u003Cstrong>menus, levels, and gameplay\u003C/strong> feel \u003Cstrong>natural and seamless\u003C/strong>.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"step-2-wireframing\">\u003Ca class=\"not-prose\" href=\"#step-2-wireframing\">\u003Cstrong>Step 2: Wireframing 📝\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Once the user flow is clear, the next step is \u003Cstrong>wireframing\u003C/strong> (a blueprint of your design). Each screen or page should contribute to \u003Cstrong>achieving the user’s goal\u003C/strong>.\u003C/p>\n\u003Cp>Back in the \u003Cstrong>1600s\u003C/strong> (okay, not really), wireframing was done with pen and paper. Today, tools like \u003Ca href=\"https://balsamiq.com/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Balsamiq\u003C/strong>\u003C/a> or \u003Ca href=\"https://www.figma.com/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Figma\u003C/strong>\u003C/a> make the process digital.\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>For a simple, intuitive UI, wireframes should focus on \u003Cstrong>structure, navigation, and key interactions\u003C/strong>\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"types-of-wireframing\">\u003Ca class=\"not-prose\" href=\"#types-of-wireframing\">\u003Cstrong>Types of Wireframing\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>Wireframing is divided into three levels based on detail and complexity:\u003C/p>\n\u003Cp>🔹 \u003Cstrong>Low-Fidelity Wireframes:\u003C/strong> Simple sketches or digital outlines. You can even use \u003Cstrong>pen and paper\u003C/strong> to start visualizing your layout. These focus on structure without detailing visuals.\u003Cbr>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./wireframe1.png&#x22;,&#x22;alt&#x22;:&#x22;wireframe1&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>🔹 \u003Cstrong>Medium-Fidelity Wireframes:\u003C/strong> More refined than low-fidelity, incorporating \u003Cstrong>clearer layouts and basic UI elements\u003C/strong>. These are often done digitally but lack final design details.\u003Cbr>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./wireframe2.jpeg&#x22;,&#x22;alt&#x22;:&#x22;wireframe2&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>🔹 \u003Cstrong>High-Fidelity Wireframes:\u003C/strong> \u003Cstrong>Closer to the final design\u003C/strong>, including \u003Cstrong>refined UI elements, typography, and accurate spacing\u003C/strong>. These wireframes resemble the finished product but lack full interactivity.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./wireframe33.webp&#x22;,&#x22;alt&#x22;:&#x22;wireframe3&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"step-3-creating-a-design-system\">\u003Ca class=\"not-prose\" href=\"#step-3-creating-a-design-system\">\u003Cstrong>Step 3: Creating a Design System 🎨\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>This marks the beginning of \u003Cstrong>UI (User Interface) design\u003C/strong>, where we bring \u003Cstrong>visual consistency\u003C/strong> to the project. A \u003Cstrong>design system\u003C/strong> ensures that colors, fonts, buttons, and icons are \u003Cstrong>uniform\u003C/strong> across the product.\u003C/p>\n\u003Ch3 id=\"color--typography\">\u003Ca class=\"not-prose\" href=\"#color--typography\">\u003Cstrong>Color &#x26; Typography\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>\u003Cstrong>Fonts\u003C/strong> define the \u003Cstrong>tone\u003C/strong> of your design. Want something formal? Elegant? Playful? Try out fonts from \u003Ca href=\"https://fonts.google.com/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Google Fonts\u003C/strong>\u003C/a> and use tools like \u003Ca href=\"https://typescale.com/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Type Scale\u003C/strong>\u003C/a> to set readable text sizes.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./typo.png&#x22;,&#x22;alt&#x22;:&#x22;typo&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>\u003Cstrong>Color\u003C/strong> schemes should align with \u003Cstrong>brand identity\u003C/strong> or project goals. Dark mode? Minimalist? Vibrant? Use \u003Cstrong>contrast and accessibility checks\u003C/strong> to make sure users can read text clearly. Use tools like \u003Ca href=\"https://colorhunt.co/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>colorhunt\u003C/strong>\u003C/a> to find cool color palletes!\u003C/p>\n\u003Ch3 id=\"primary-secondary--accent-colors\">\u003Ca class=\"not-prose\" href=\"#primary-secondary--accent-colors\">\u003Cstrong>Primary, Secondary &#x26; Accent Colors\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Primary Color\u003C/strong> –> The \u003Cstrong>main color\u003C/strong> of the design, often used for branding, key UI elements, and major CTAs (Call-To-Action buttons).\u003C/li>\n\u003Cli>\u003Cstrong>Secondary Color\u003C/strong> –> A supporting color used for \u003Cstrong>contrast or differentiation\u003C/strong>, such as secondary buttons or highlights.\u003C/li>\n\u003Cli>\u003Cstrong>Accent Color\u003C/strong> –> Used sparingly for emphasis, alerts, or \u003Cstrong>attention-grabbing elements\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"contrast--typography\">\u003Ca class=\"not-prose\" href=\"#contrast--typography\">\u003Cstrong>Contrast &#x26; Typography\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>Contrast plays a critical role in \u003Cstrong>readability\u003C/strong> and \u003Cstrong>accessibility\u003C/strong>.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>High contrast\u003C/strong> (e.g., dark text on a light background) improves readability and accessibility.\u003C/li>\n\u003Cli>\u003Cstrong>Low contrast\u003C/strong> can be used for subtle UI elements but should \u003Cstrong>never compromise legibility\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./tandc.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Contrast &#x26; Typography&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch3 id=\"applying-color-in-ui\">\u003Ca class=\"not-prose\" href=\"#applying-color-in-ui\">\u003Cstrong>Applying Color in UI\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>✅ \u003Cstrong>60-30-10 Rule\u003C/strong>:\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./colorspercetange.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Colors Percetange&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch3 id=\"activity-realtime-colors-️\">\u003Ca class=\"not-prose\" href=\"#activity-realtime-colors-️\">\u003Cstrong>Activity: Realtime Colors 🖌️\u003C/strong>\u003C/a>\u003C/h3>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Now that you understand \u003Cstrong>user flow, wireframing and design systems\u003C/strong>, it’s time to \u003Cstrong>put it all into practice\u003C/strong>!\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>A great tool to experiment with \u003Cstrong>color palettes, contrast, and real-time UI updates\u003C/strong> is \u003Cstrong>\u003Ca href=\"https://www.realtimecolors.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Realtime Colors\u003C/a>\u003C/strong>.\u003C/p>\n\u003Cp>☐ \u003Cstrong>Test different primary, secondary, and accent colors\u003C/strong> in a live UI.\u003Cbr>\n☐ \u003Cstrong>Check contrast &#x26; readability\u003C/strong> to ensure accessibility.\u003Cbr>\n☐ \u003Cstrong>See instant previews\u003C/strong> of how your colors affect the overall design.\u003C/p>\n\u003Ch2 id=\"step-4-the-actual-ui-design\">\u003Ca class=\"not-prose\" href=\"#step-4-the-actual-ui-design\">\u003Cstrong>Step 4: The Actual UI Design 🎨🔥\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Now that you have your \u003Cstrong>building blocks\u003C/strong>, it’s time to design! Keep these \u003Cstrong>six key UI/UX principles\u003C/strong> in mind:\u003C/p>\n\u003Cp>1️⃣ \u003Cstrong>Visual Hierarchy\u003C/strong> –> Prioritize important elements.\u003Cbr>\n2️⃣ \u003Cstrong>Contrast\u003C/strong> –> Make text readable.\u003Cbr>\n3️⃣ \u003Cstrong>Balance\u003C/strong> –> Space elements evenly.\u003Cbr>\n4️⃣ \u003Cstrong>Consistency\u003C/strong> –> Keep styles uniform.\u003Cbr>\n5️⃣ \u003Cstrong>Simplicity\u003C/strong> –> Avoid unnecessary clutter.\u003Cbr>\n6️⃣ \u003Cstrong>Interaction Feedback\u003C/strong> – Show responses to user actions.\u003C/p>\n\u003Ch3 id=\"prototyping--testing\">\u003Ca class=\"not-prose\" href=\"#prototyping--testing\">\u003Cstrong>Prototyping &#x26; Testing\u003C/strong>\u003C/a>\u003C/h3>\n\u003Cp>UI design isn’t just assembling elements—it’s about \u003Cstrong>testing, iterating, and refining\u003C/strong> the design. Prototyping in \u003Cstrong>Figma or Adobe XD\u003C/strong> helps visualize user interactions before development.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./clickk.gif&#x22;,&#x22;alt&#x22;:&#x22;Click&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch3 id=\"activity-create-a-homepage\">\u003Ca class=\"not-prose\" href=\"#activity-create-a-homepage\">\u003Cstrong>Activity: Create a Homepage! 🎨\u003C/strong>\u003C/a>\u003C/h3>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Now that you have experimented at previous \u003Cstrong>Realtime Colors\u003C/strong> activity, it’s time for a hands-on challenge: \u003Cstrong>design a UI homepage\u003C/strong> for a website! This activity will help you apply everything you’ve learned about \u003Cstrong>User Flow, Wireframing, Colors, and UI\u003C/strong>.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch4 id=\"-activity-instructions\">\u003Ca class=\"not-prose\" href=\"#-activity-instructions\">\u003Cstrong>📌 Activity Instructions:\u003C/strong>\u003C/a>\u003C/h4>\n\u003Cp>1️⃣ \u003Cstrong>Use Google Slides\u003C/strong> to design a homepage layout.\u003Cbr>\n2️⃣ Apply the \u003Cstrong>color palette\u003C/strong> you created in \u003Ca href=\"https://www.realtimecolors.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Realtime Colors\u003C/a>.\u003Cbr>\n3️⃣ Incorporate UI/UX principles like \u003Cstrong>visual hierarchy, contrast, and consistency\u003C/strong>.\u003Cbr>\n4️⃣ Use \u003Cstrong>Google Slides default fonts\u003C/strong> to keep it simple and accessible.\u003Cbr>\n5️⃣ Keep in mind \u003Cstrong>user experience\u003C/strong>—the layout should be intuitive and visually appealing.\u003C/p>\n\u003Cp>Your homepage could be for:\u003Cbr>\n\u003Cstrong>A portfolio website\u003C/strong> (showcasing design work).\u003Cbr>\n\u003Cstrong>An e-commerce site\u003C/strong> (featuring a product or brand).\u003Cbr>\n\u003Cstrong>A tech startup\u003C/strong> (introducing a product or service).\u003Cbr>\n\u003Cstrong>A blog or news site\u003C/strong> (highlighting content).\u003Cbr>\n\u003Cstrong>A landing page for an event\u003C/strong> (conference, workshop, or course).\u003C/p>\n\u003Ch4 id=\"-finding-inspiration\">\u003Ca class=\"not-prose\" href=\"#-finding-inspiration\">\u003Cstrong>🔍 Finding Inspiration\u003C/strong>\u003C/a>\u003C/h4>\n\u003Cp>Not sure where to start? Look for \u003Cstrong>real-world examples\u003C/strong> and \u003Cstrong>designs\u003C/strong> at:\u003Cbr>\n👉 \u003Ca href=\"https://dribbble.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Dribbble\u003C/a>\u003Cbr>\n👉 \u003Ca href=\"https://www.pinterest.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Pinterest\u003C/a>\u003C/p>\n\u003Cp>💡 \u003Cstrong>Use keywords like:\u003C/strong>\u003Cbr>\n🔹 \u003Cstrong>UI/UX\u003C/strong>\u003Cbr>\n🔹 \u003Cstrong>Website design\u003C/strong>\u003Cbr>\n🔹 \u003Cstrong>Website color palette\u003C/strong>\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"final-thoughts\">\u003Ca class=\"not-prose\" href=\"#final-thoughts\">\u003Cstrong>Final Thoughts\u003C/strong>\u003C/a>\u003C/h2>\n\u003Cp>Great UI/UX design isn’t about making things look pretty—it’s about \u003Cstrong>guiding users effortlessly\u003C/strong> through an experience. From mapping out user journeys to fine-tuning colors and typography, the key is \u003Cstrong>designing with purpose\u003C/strong>.\u003C/p>\n\u003Cp>🎨 \u003Cstrong>Next Steps?\u003C/strong>\nStart experimenting! Try designing your first UI prototype in \u003Cstrong>Figma\u003C/strong>, apply these principles, and refine your skills.\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Stay tuned for upcoming posts!\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Post by: Artecs 2025 Team\u003C/p>",{"headings":302,"imagePaths":352,"frontmatter":353},[303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351],{"depth":57,"slug":304,"text":305},"uiux-design-where-to-start","UI/UX Design: Where to Start?",{"depth":57,"slug":307,"text":308},"step-1-understanding-user-flow","Step 1: Understanding User Flow 📍",{"depth":61,"slug":310,"text":311},"user-flow-in-game-design","User Flow in Game Design 🎮",{"depth":57,"slug":313,"text":314},"step-2-wireframing","Step 2: Wireframing 📝",{"depth":61,"slug":316,"text":317},"types-of-wireframing","Types of Wireframing",{"depth":57,"slug":319,"text":320},"step-3-creating-a-design-system","Step 3: Creating a Design System 🎨",{"depth":61,"slug":322,"text":323},"color--typography","Color & Typography",{"depth":61,"slug":325,"text":326},"primary-secondary--accent-colors","Primary, Secondary & Accent Colors",{"depth":61,"slug":328,"text":329},"contrast--typography","Contrast & Typography",{"depth":61,"slug":331,"text":332},"applying-color-in-ui","Applying Color in UI",{"depth":61,"slug":334,"text":335},"activity-realtime-colors-️","Activity: Realtime Colors 🖌️",{"depth":57,"slug":337,"text":338},"step-4-the-actual-ui-design","Step 4: The Actual UI Design 🎨🔥",{"depth":61,"slug":340,"text":341},"prototyping--testing","Prototyping & Testing",{"depth":61,"slug":343,"text":344},"activity-create-a-homepage","Activity: Create a Homepage! 🎨",{"depth":152,"slug":346,"text":347},"-activity-instructions","📌 Activity Instructions:",{"depth":152,"slug":349,"text":350},"-finding-inspiration","🔍 Finding Inspiration",{"depth":57,"slug":74,"text":75},[285,286,287,288,289,290,291,292,293,294,295,296,297],{"title":275,"description":276,"publishDate":354,"category":209,"tags":355,"coverImage":356,"ogImage":40,"readingTime":203},"20 Mar 2025",[280],{"src":40,"alt":278},"game-dev-intro",{"id":357,"data":359,"body":366,"filePath":367,"assetImports":368,"digest":369,"rendered":370},{"title":360,"description":361,"category":35,"coverImage":362,"draft":39,"ogImage":40,"tags":364,"publishDate":365},"Godot [0]: Introduction to Game Development","Overview of game development, core concepts, and why it's an exciting field.",{"alt":363,"src":38},"Gamedev Logo",[42,43,44],["Date","2025-02-06T07:00:00.000Z"],"## What Is Game Development?\r\n\r\nGame development is the process of **designing, creating, and programming** interactive digital experiences, commonly known as *video games*. It involves multiple disciplines, including **game design, programming, art, sound design, and storytelling**, to bring immersive and engaging worlds to life.\r\n\r\n![1](./1.png)\r\n\r\n## Computers Are Powerful but Need Precise Instructions\r\n\r\nGame development is all about turning **creative ideas** into **interactive experiences**. But to make a game, we need a way to **communicate our vision** to the computer. \r\n\r\n:::tip\r\nComputers follow instructions exactly as given, so precision in programming is essential.\r\n:::\r\n\r\nComputers don’t think on their own. They’re essentially **lifeless machines** that process instructions **exactly** as given. \r\n\r\nIf you tell a computer to **“make a character jump,”** it won’t understand unless you provide **precise details**:\r\n\r\n- **How high** should the jump be?  \r\n- **How fast** should the character move?  \r\n- **Should gravity** pull them back down?  \r\n\r\nFor example, in the [**Godot engine**](https://godotengine.org/) (a software framework used to build games), if you want to move a character, you might write something like this:\r\n\r\n```python title=\"file.gd\"\r\nvelocity.y -= 300 # Moves the character up\r\n```\r\n\r\nThis line tells the computer to **decrease the character’s vertical position**, simulating an **upward motion**. The number **300** represents how much force is applied. Understanding how **numbers** and **functions** interact in code is essential for game development.\r\n\r\n:::important\r\nAfter reading, check out the **What Are Game Engines?** post to learn more about what game engines are and why they’re important!\r\n:::\r\n\r\n## The Structure of Code in Game Development\r\n\r\nWriting code isn’t the same as writing a sentence in **English**. **Programming languages** have strict **syntax** and **structure**, defined by the tools and engines developers use.  \r\n\r\nFor instance, in **Godot**, functions follow a specific format:\r\n\r\n```python title=\"file.gd\"\r\ndefinition_name(parameters):\r\n    # Instructions go here\r\n```\r\n\r\nIf you wanted to create a **function** to make a character **jump** when a player presses a key, it might look something like this:\r\n\r\n```python title=\"file.gd\"\r\nfunc jump():\r\n    velocity.y = -400\r\n```\r\n\r\nEvery **function** follows a **predefined pattern**, and learning how to read **technical documentation** will help you understand and use new functions effectively. The [**Godot documentation**](https://docs.godotengine.org/en/stable/about/introduction.html) acts as a reference, much like a **dictionary**, allowing developers to look up specific **code expressions** and understand how they work.\r\n\r\n\r\n## How to Make a Game: A Simple Analogy\r\n\r\nMaking a game is a lot like cooking:\r\n\r\n- **Code = The recipe** (instructions on how the game behaves).\r\n- **Assets = The ingredients** (visuals, sounds, and other media used in the game).\r\n- **Game engine = Kitchen tools** (the software that helps combine everything into a playable game).\r\n\r\n![2](./2.png)\r\n\r\nWithout **code**, the game has no **structure**.  \r\nWithout **assets**, it lacks **visuals** and **sounds**.  \r\nAnd without a **game engine**, there’s no way to put everything together efficiently.  \r\n\r\nLearning how to use these elements effectively is **key to becoming a game developer**.\r\n\r\n:::caution\r\nA game without proper structure can be messy and inefficient, leading to performance issues and bugs.\r\n:::\r\n\r\n## Learning to Code for Game Development\r\n\r\nGame development isn’t just about learning a **programming language**—it’s about developing a **problem-solving mindset**.  \r\n\r\nThroughout the learning process, you’ll encounter **challenges** that require **creative solutions**, like making an enemy **chase the player** or ensuring **smooth movement physics**.  \r\n\r\nBy practicing game development, you’ll learn:  \r\n\r\n- **Fundamental programming concepts** such as **variables, loops, and functions**.  \r\n- How to **structure your game’s logic efficiently**.  \r\n- The ability to **read and understand code** from references and examples.  \r\n- How to **think like a game developer** and break **complex problems** into **manageable pieces**.  \r\n\r\n## Your Journey to Becoming a Game Developer\r\n\r\nNo single **course** or **tutorial** will make you a professional overnight. Like any **skill**, mastering **game development** takes **time** and **practice**. The key is to **start small**—create **simple games**, experiment with **mechanics**, and gradually take on **more complex projects**.  \r\n\r\nWith each project, your **understanding** will grow, and so will your ability to **solve problems independently**. The goal is not just to **follow step-by-step tutorials**, but to reach a point where you can **build your own games from scratch**.\r\n\r\n## What’s Next?\r\n\r\nIn the next sections, we’ll discuss:\r\n\r\n👉 [**What Are Game Engines?**](https://www.artecs.org/posts/game-engines-intro/)\r\n\r\n:::important\r\nStay motivated, experiment often, and enjoy the process of bringing your game ideas to life!\r\n:::\r\n\r\nPost by: Gabriel Alonso","src/content/post/game-dev-intro/index.md",[49,50,40],"b269ffc1aea95e3d",{"html":371,"metadata":372},"\u003Ch2 id=\"what-is-game-development\">\u003Ca class=\"not-prose\" href=\"#what-is-game-development\">What Is Game Development?\u003C/a>\u003C/h2>\n\u003Cp>Game development is the process of \u003Cstrong>designing, creating, and programming\u003C/strong> interactive digital experiences, commonly known as \u003Cem>video games\u003C/em>. It involves multiple disciplines, including \u003Cstrong>game design, programming, art, sound design, and storytelling\u003C/strong>, to bring immersive and engaging worlds to life.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./1.png&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;index&#x22;:0}\">\n\u003Ch2 id=\"computers-are-powerful-but-need-precise-instructions\">\u003Ca class=\"not-prose\" href=\"#computers-are-powerful-but-need-precise-instructions\">Computers Are Powerful but Need Precise Instructions\u003C/a>\u003C/h2>\n\u003Cp>Game development is all about turning \u003Cstrong>creative ideas\u003C/strong> into \u003Cstrong>interactive experiences\u003C/strong>. But to make a game, we need a way to \u003Cstrong>communicate our vision\u003C/strong> to the computer.\u003C/p>\n\u003Caside aria-label=\"tip\" class=\"admonition\" data-admonition-type=\"tip\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">tip\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Computers follow instructions exactly as given, so precision in programming is essential.\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Computers don’t think on their own. They’re essentially \u003Cstrong>lifeless machines\u003C/strong> that process instructions \u003Cstrong>exactly\u003C/strong> as given.\u003C/p>\n\u003Cp>If you tell a computer to \u003Cstrong>“make a character jump,”\u003C/strong> it won’t understand unless you provide \u003Cstrong>precise details\u003C/strong>:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>How high\u003C/strong> should the jump be?\u003C/li>\n\u003Cli>\u003Cstrong>How fast\u003C/strong> should the character move?\u003C/li>\n\u003Cli>\u003Cstrong>Should gravity\u003C/strong> pull them back down?\u003C/li>\n\u003C/ul>\n\u003Cp>For example, in the \u003Ca href=\"https://godotengine.org/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Godot engine\u003C/strong>\u003C/a> (a software framework used to build games), if you want to move a character, you might write something like this:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.x0vho.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">velocity.y \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">-=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">300\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\"># Moves the character up\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"velocity.y -= 300 # Moves the character up\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>This line tells the computer to \u003Cstrong>decrease the character’s vertical position\u003C/strong>, simulating an \u003Cstrong>upward motion\u003C/strong>. The number \u003Cstrong>300\u003C/strong> represents how much force is applied. Understanding how \u003Cstrong>numbers\u003C/strong> and \u003Cstrong>functions\u003C/strong> interact in code is essential for game development.\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>After reading, check out the \u003Cstrong>What Are Game Engines?\u003C/strong> post to learn more about what game engines are and why they’re important!\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"the-structure-of-code-in-game-development\">\u003Ca class=\"not-prose\" href=\"#the-structure-of-code-in-game-development\">The Structure of Code in Game Development\u003C/a>\u003C/h2>\n\u003Cp>Writing code isn’t the same as writing a sentence in \u003Cstrong>English\u003C/strong>. \u003Cstrong>Programming languages\u003C/strong> have strict \u003Cstrong>syntax\u003C/strong> and \u003Cstrong>structure\u003C/strong>, defined by the tools and engines developers use.\u003C/p>\n\u003Cp>For instance, in \u003Cstrong>Godot\u003C/strong>, functions follow a specific format:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">definition_name(parameters):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">    \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\"># Instructions go here\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"definition_name(parameters):    # Instructions go here\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>If you wanted to create a \u003Cstrong>function\u003C/strong> to make a character \u003Cstrong>jump\u003C/strong> when a player presses a key, it might look something like this:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">func jump():\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">    \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">velocity.y \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">-\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"func jump():    velocity.y = -400\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Every \u003Cstrong>function\u003C/strong> follows a \u003Cstrong>predefined pattern\u003C/strong>, and learning how to read \u003Cstrong>technical documentation\u003C/strong> will help you understand and use new functions effectively. The \u003Ca href=\"https://docs.godotengine.org/en/stable/about/introduction.html\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Godot documentation\u003C/strong>\u003C/a> acts as a reference, much like a \u003Cstrong>dictionary\u003C/strong>, allowing developers to look up specific \u003Cstrong>code expressions\u003C/strong> and understand how they work.\u003C/p>\n\u003Ch2 id=\"how-to-make-a-game-a-simple-analogy\">\u003Ca class=\"not-prose\" href=\"#how-to-make-a-game-a-simple-analogy\">How to Make a Game: A Simple Analogy\u003C/a>\u003C/h2>\n\u003Cp>Making a game is a lot like cooking:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Code = The recipe\u003C/strong> (instructions on how the game behaves).\u003C/li>\n\u003Cli>\u003Cstrong>Assets = The ingredients\u003C/strong> (visuals, sounds, and other media used in the game).\u003C/li>\n\u003Cli>\u003Cstrong>Game engine = Kitchen tools\u003C/strong> (the software that helps combine everything into a playable game).\u003C/li>\n\u003C/ul>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./2.png&#x22;,&#x22;alt&#x22;:&#x22;2&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>Without \u003Cstrong>code\u003C/strong>, the game has no \u003Cstrong>structure\u003C/strong>.\u003Cbr>\nWithout \u003Cstrong>assets\u003C/strong>, it lacks \u003Cstrong>visuals\u003C/strong> and \u003Cstrong>sounds\u003C/strong>.\u003Cbr>\nAnd without a \u003Cstrong>game engine\u003C/strong>, there’s no way to put everything together efficiently.\u003C/p>\n\u003Cp>Learning how to use these elements effectively is \u003Cstrong>key to becoming a game developer\u003C/strong>.\u003C/p>\n\u003Caside aria-label=\"caution\" class=\"admonition\" data-admonition-type=\"caution\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">caution\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>A game without proper structure can be messy and inefficient, leading to performance issues and bugs.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"learning-to-code-for-game-development\">\u003Ca class=\"not-prose\" href=\"#learning-to-code-for-game-development\">Learning to Code for Game Development\u003C/a>\u003C/h2>\n\u003Cp>Game development isn’t just about learning a \u003Cstrong>programming language\u003C/strong>—it’s about developing a \u003Cstrong>problem-solving mindset\u003C/strong>.\u003C/p>\n\u003Cp>Throughout the learning process, you’ll encounter \u003Cstrong>challenges\u003C/strong> that require \u003Cstrong>creative solutions\u003C/strong>, like making an enemy \u003Cstrong>chase the player\u003C/strong> or ensuring \u003Cstrong>smooth movement physics\u003C/strong>.\u003C/p>\n\u003Cp>By practicing game development, you’ll learn:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Fundamental programming concepts\u003C/strong> such as \u003Cstrong>variables, loops, and functions\u003C/strong>.\u003C/li>\n\u003Cli>How to \u003Cstrong>structure your game’s logic efficiently\u003C/strong>.\u003C/li>\n\u003Cli>The ability to \u003Cstrong>read and understand code\u003C/strong> from references and examples.\u003C/li>\n\u003Cli>How to \u003Cstrong>think like a game developer\u003C/strong> and break \u003Cstrong>complex problems\u003C/strong> into \u003Cstrong>manageable pieces\u003C/strong>.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"your-journey-to-becoming-a-game-developer\">\u003Ca class=\"not-prose\" href=\"#your-journey-to-becoming-a-game-developer\">Your Journey to Becoming a Game Developer\u003C/a>\u003C/h2>\n\u003Cp>No single \u003Cstrong>course\u003C/strong> or \u003Cstrong>tutorial\u003C/strong> will make you a professional overnight. Like any \u003Cstrong>skill\u003C/strong>, mastering \u003Cstrong>game development\u003C/strong> takes \u003Cstrong>time\u003C/strong> and \u003Cstrong>practice\u003C/strong>. The key is to \u003Cstrong>start small\u003C/strong>—create \u003Cstrong>simple games\u003C/strong>, experiment with \u003Cstrong>mechanics\u003C/strong>, and gradually take on \u003Cstrong>more complex projects\u003C/strong>.\u003C/p>\n\u003Cp>With each project, your \u003Cstrong>understanding\u003C/strong> will grow, and so will your ability to \u003Cstrong>solve problems independently\u003C/strong>. The goal is not just to \u003Cstrong>follow step-by-step tutorials\u003C/strong>, but to reach a point where you can \u003Cstrong>build your own games from scratch\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"whats-next\">\u003Ca class=\"not-prose\" href=\"#whats-next\">What’s Next?\u003C/a>\u003C/h2>\n\u003Cp>In the next sections, we’ll discuss:\u003C/p>\n\u003Cp>👉 \u003Ca href=\"https://www.artecs.org/posts/game-engines-intro/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>What Are Game Engines?\u003C/strong>\u003C/a>\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Stay motivated, experiment often, and enjoy the process of bringing your game ideas to life!\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Post by: Gabriel Alonso\u003C/p>",{"headings":373,"imagePaths":393,"frontmatter":394},[374,377,380,383,386,389,392],{"depth":57,"slug":375,"text":376},"what-is-game-development","What Is Game Development?",{"depth":57,"slug":378,"text":379},"computers-are-powerful-but-need-precise-instructions","Computers Are Powerful but Need Precise Instructions",{"depth":57,"slug":381,"text":382},"the-structure-of-code-in-game-development","The Structure of Code in Game Development",{"depth":57,"slug":384,"text":385},"how-to-make-a-game-a-simple-analogy","How to Make a Game: A Simple Analogy",{"depth":57,"slug":387,"text":388},"learning-to-code-for-game-development","Learning to Code for Game Development",{"depth":57,"slug":390,"text":391},"your-journey-to-becoming-a-game-developer","Your Journey to Becoming a Game Developer",{"depth":57,"slug":77,"text":78},[49,50],{"title":360,"description":361,"publishDate":395,"category":35,"tags":396,"coverImage":397,"ogImage":40,"readingTime":398},"6 Feb 2025",[42,43,44],{"src":40,"alt":363},"4 min read","godot-intro",{"id":399,"data":401,"body":408,"filePath":409,"assetImports":410,"digest":412,"rendered":413},{"title":402,"description":403,"category":35,"coverImage":404,"draft":39,"ogImage":40,"tags":406,"publishDate":407},"Godot [2]: Learning Godot - Tutorial","A beginner-friendly introduction to using the Godot game engine, following Brackeys' tutorial.",{"alt":405,"src":38},"Godot Intro Logo",[42,43,44],["Date","2025-02-08T07:00:00.000Z"],"## Learning Godot: Why This Video?\r\n\r\nStarting game development can be overwhelming, but thanks to great resources like **Brackeys' \"How to Make a Video Game - Godot Beginner Tutorial\"**, you don’t have to start from scratch. Instead of creating our own tutorial, we believe this video is an **excellent introduction** to Godot. It covers the **fundamentals of game creation**, and it’s the perfect **first step** before diving into more complex topics.\r\n\r\n:::note\r\nWe will be adding our **our own guides**, called **\"Recipes\",** soon. In the meantime, this video provides **everything you need** to get started. Below the video, you will find a **glossary of key concepts** for easy reference.\r\n:::\r\n\r\n## Video Tutorial 🎥\r\n\r\n**How to make a Video Game - Godot Beginner Tutorial by Brackeys**\r\n\u003Ciframe \r\n    src=\"https://www.youtube.com/embed/LOhfqjmasi0\" \r\n    title=\"How to make a Video Game - Godot Beginner Tutorial\" \r\n    frameborder=\"0\" \r\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n    allowfullscreen \r\n    width=\"100%\" \r\n    height=\"315\">\r\n\u003C/iframe>\r\n\r\n---\r\n\r\n## Godot Beginner Cheatsheet 📚\r\n\r\n### Core Concepts\r\n- **Node** –> Basic building blocks of games (e.g., player, enemy, platforms).\r\n- **Scene** –> Reusable template composed of nodes.\r\n- **Scene Tree** –> Hierarchical structure of nodes (parent-child relationships).\r\n\r\n### Delta Time\r\n- **`delta`** ⏳ –> Ensures consistent game speed regardless of frame rate:\r\n ```python title=\"file.gd\"\r\n  position += speed * delta\r\n  ```\r\n\r\n✅ **With** Delta Time:\r\n![1](./1.gif)\r\n\r\n❌ **Without** Delta Time:\r\n![2](./2.gif)\r\n\r\n### Essential Nodes\r\n- **CharacterBody2D** –> Player or NPC with physics-based movement.\r\n- **StaticBody2D** –> Non-moving objects (ground, walls).\r\n- **Area2D** –> Detects overlapping objects, useful for pickups or kill zones.\r\n- **CollisionShape2D** –> Defines physical collision boundaries.\r\n- **RayCast2D** –> Detects collisions in a specific direction.\r\n\r\n### Graphics & Animation\r\n- **Sprite2D** –> Displays static images.\r\n- **AnimatedSprite2D** –> Handles frame-based animations.\r\n- **AnimationPlayer** –> Animates any property over time (position, scale, visibility).\r\n\r\n### Scripting (GDScript)\r\n- **Built-in Functions:**\r\n  - `_ready()` –> Runs once upon entering the scene.\r\n  - `_process(delta)` –> Runs every frame for general logic.\r\n  - `_physics_process(delta)` –> Fixed updates for reliable physics.\r\n  \r\n- **Signals** –> Execute code in response to events:\r\n ```python title=\"file.gd\"\r\n  func _on_body_entered(body):\r\n      queue_free()  # Removes node from scene\r\n  ```\r\n\r\n### Node Referencing\r\n- **Direct Reference (shortcut):**\r\n ```python title=\"file.gd\"\r\n  var player = $Player\r\n  ```\r\n\r\n- **Unique Nodes (using `%`):** Reference easily regardless of position:\r\n ```python title=\"file.gd\"\r\n  var manager = %GameManager\r\n  ```\r\n\r\n- **Autoload (Singleton):** Global scripts accessible everywhere:\r\n ```python title=\"file.gd\"\r\n  GameManager.score += 1\r\n  ```\r\n\r\n### Audio\r\n- **AudioStreamPlayer2D** –> Plays audio in 2D space.\r\n\r\n## What’s Next?\r\n\r\nIn the next sections, we’ll discuss:\r\n\r\n👉 **[How to Program in Godot - GDScript Tutorial](#)**\r\n\r\nRead the previous section:\r\n\r\n👉 [**What Are Game Engines?**](https://www.artecs.org/posts/game-engines-intro/)\r\n\r\n:::important\r\nKeep exploring, learning, and creating amazing games with Godot! 🚀\r\n:::\r\n\r\nPost by: Gabriel Alonso","src/content/post/godot-intro/index.md",[217,411,40],"./2.gif","49d2ca4c4da7d39e",{"html":414,"metadata":415},"\u003Ch2 id=\"learning-godot-why-this-video\">\u003Ca class=\"not-prose\" href=\"#learning-godot-why-this-video\">Learning Godot: Why This Video?\u003C/a>\u003C/h2>\n\u003Cp>Starting game development can be overwhelming, but thanks to great resources like \u003Cstrong>Brackeys’ “How to Make a Video Game - Godot Beginner Tutorial”\u003C/strong>, you don’t have to start from scratch. Instead of creating our own tutorial, we believe this video is an \u003Cstrong>excellent introduction\u003C/strong> to Godot. It covers the \u003Cstrong>fundamentals of game creation\u003C/strong>, and it’s the perfect \u003Cstrong>first step\u003C/strong> before diving into more complex topics.\u003C/p>\n\u003Caside aria-label=\"note\" class=\"admonition\" data-admonition-type=\"note\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">note\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>We will be adding our \u003Cstrong>our own guides\u003C/strong>, called \u003Cstrong>“Recipes”,\u003C/strong> soon. In the meantime, this video provides \u003Cstrong>everything you need\u003C/strong> to get started. Below the video, you will find a \u003Cstrong>glossary of key concepts\u003C/strong> for easy reference.\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"video-tutorial\">\u003Ca class=\"not-prose\" href=\"#video-tutorial\">Video Tutorial 🎥\u003C/a>\u003C/h2>\n\u003Cp>\u003Cstrong>How to make a Video Game - Godot Beginner Tutorial by Brackeys\u003C/strong>\u003C/p>\n\u003Ciframe src=\"https://www.youtube.com/embed/LOhfqjmasi0\" title=\"How to make a Video Game - Godot Beginner Tutorial\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen width=\"100%\" height=\"315\">\n\u003C/iframe>\n\u003Chr>\n\u003Ch2 id=\"godot-beginner-cheatsheet\">\u003Ca class=\"not-prose\" href=\"#godot-beginner-cheatsheet\">Godot Beginner Cheatsheet 📚\u003C/a>\u003C/h2>\n\u003Ch3 id=\"core-concepts\">\u003Ca class=\"not-prose\" href=\"#core-concepts\">Core Concepts\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Node\u003C/strong> –> Basic building blocks of games (e.g., player, enemy, platforms).\u003C/li>\n\u003Cli>\u003Cstrong>Scene\u003C/strong> –> Reusable template composed of nodes.\u003C/li>\n\u003Cli>\u003Cstrong>Scene Tree\u003C/strong> –> Hierarchical structure of nodes (parent-child relationships).\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"delta-time\">\u003Ca class=\"not-prose\" href=\"#delta-time\">Delta Time\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode>delta\u003C/code>\u003C/strong> ⏳ –> Ensures consistent game speed regardless of frame rate:\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.x0vho.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">position \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">+=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> speed \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">*\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> delta\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\" position += speed * delta\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>✅ \u003Cstrong>With\u003C/strong> Delta Time:\r\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./1.gif&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>❌ \u003Cstrong>Without\u003C/strong> Delta Time:\r\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./2.gif&#x22;,&#x22;alt&#x22;:&#x22;2&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch3 id=\"essential-nodes\">\u003Ca class=\"not-prose\" href=\"#essential-nodes\">Essential Nodes\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>CharacterBody2D\u003C/strong> –> Player or NPC with physics-based movement.\u003C/li>\n\u003Cli>\u003Cstrong>StaticBody2D\u003C/strong> –> Non-moving objects (ground, walls).\u003C/li>\n\u003Cli>\u003Cstrong>Area2D\u003C/strong> –> Detects overlapping objects, useful for pickups or kill zones.\u003C/li>\n\u003Cli>\u003Cstrong>CollisionShape2D\u003C/strong> –> Defines physical collision boundaries.\u003C/li>\n\u003Cli>\u003Cstrong>RayCast2D\u003C/strong> –> Detects collisions in a specific direction.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"graphics--animation\">\u003Ca class=\"not-prose\" href=\"#graphics--animation\">Graphics &#x26; Animation\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Sprite2D\u003C/strong> –> Displays static images.\u003C/li>\n\u003Cli>\u003Cstrong>AnimatedSprite2D\u003C/strong> –> Handles frame-based animations.\u003C/li>\n\u003Cli>\u003Cstrong>AnimationPlayer\u003C/strong> –> Animates any property over time (position, scale, visibility).\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"scripting-gdscript\">\u003Ca class=\"not-prose\" href=\"#scripting-gdscript\">Scripting (GDScript)\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Built-in Functions:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>_ready()\u003C/code> –> Runs once upon entering the scene.\u003C/li>\n\u003Cli>\u003Ccode>_process(delta)\u003C/code> –> Runs every frame for general logic.\u003C/li>\n\u003Cli>\u003Ccode>_physics_process(delta)\u003C/code> –> Fixed updates for reliable physics.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Signals\u003C/strong> –> Execute code in response to events:\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">func _on_body_entered(body):\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">     \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">queue_free()  \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\"># Removes node from scene\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\" func _on_body_entered(body):     queue_free()  # Removes node from scene\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Ch3 id=\"node-referencing\">\u003Ca class=\"not-prose\" href=\"#node-referencing\">Node Referencing\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Direct Reference (shortcut):\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">var player \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#FF7777;--0fs:italic;--0td:underline;--1:#B31D28;--1fs:italic\">$\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">Player\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\" var player = $Player\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>Unique Nodes (using \u003Ccode>%\u003C/code>):\u003C/strong> Reference easily regardless of position:\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">var manager \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">%\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">GameManager\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\" var manager = %GameManager\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>Autoload (Singleton):\u003C/strong> Global scripts accessible everywhere:\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">file.gd\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"python\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">GameManager.score \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">+=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">1\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\" GameManager.score += 1\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Ch3 id=\"audio\">\u003Ca class=\"not-prose\" href=\"#audio\">Audio\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>AudioStreamPlayer2D\u003C/strong> –> Plays audio in 2D space.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"whats-next\">\u003Ca class=\"not-prose\" href=\"#whats-next\">What’s Next?\u003C/a>\u003C/h2>\n\u003Cp>In the next sections, we’ll discuss:\u003C/p>\n\u003Cp>👉 \u003Cstrong>\u003Ca href=\"#\">How to Program in Godot - GDScript Tutorial\u003C/a>\u003C/strong>\u003C/p>\n\u003Cp>Read the previous section:\u003C/p>\n\u003Cp>👉 \u003Ca href=\"https://www.artecs.org/posts/game-engines-intro/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>What Are Game Engines?\u003C/strong>\u003C/a>\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Keep exploring, learning, and creating amazing games with Godot! 🚀\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Post by: Gabriel Alonso\u003C/p>",{"headings":416,"imagePaths":448,"frontmatter":449},[417,420,423,426,429,432,435,438,441,444,447],{"depth":57,"slug":418,"text":419},"learning-godot-why-this-video","Learning Godot: Why This Video?",{"depth":57,"slug":421,"text":422},"video-tutorial","Video Tutorial 🎥",{"depth":57,"slug":424,"text":425},"godot-beginner-cheatsheet","Godot Beginner Cheatsheet 📚",{"depth":61,"slug":427,"text":428},"core-concepts","Core Concepts",{"depth":61,"slug":430,"text":431},"delta-time","Delta Time",{"depth":61,"slug":433,"text":434},"essential-nodes","Essential Nodes",{"depth":61,"slug":436,"text":437},"graphics--animation","Graphics & Animation",{"depth":61,"slug":439,"text":440},"scripting-gdscript","Scripting (GDScript)",{"depth":61,"slug":442,"text":443},"node-referencing","Node Referencing",{"depth":61,"slug":445,"text":446},"audio","Audio",{"depth":57,"slug":77,"text":78},[217,411],{"title":402,"description":403,"publishDate":450,"category":35,"tags":451,"coverImage":452,"ogImage":40,"readingTime":84},"8 Feb 2025",[42,43,44],{"src":40,"alt":405},"creative-coding-intro",{"id":453,"data":455,"body":464,"filePath":465,"assetImports":466,"digest":469,"rendered":470},{"title":456,"description":457,"category":209,"coverImage":458,"draft":39,"ogImage":40,"tags":460,"publishDate":463},"P5.JS [0]: Introduction to creative coding","A beginner-friendly introduction to creative coding, covering basic programming concepts and how to start making art with p5.js.",{"alt":459,"src":38},"p5.js Logo",[461,462],"creative-coding","p5.js",["Date","2025-02-13T07:00:00.000Z"],"## What Is Creative Coding?\r\n\r\nCreative coding is the practice of using **code as a tool for artistic expression**. Unlike traditional programming, which focuses on solving problems or building applications, creative coding is about **making visuals, animations, and interactive art**.\r\n\r\n![0](./creative-coding.png)\r\n\r\nSome things you can create with creative coding:\r\n- **Digital art and generative patterns**\r\n- **Animations and interactive sketches**\r\n- **Music visualizations**\r\n- **Web-based games and interactive experiments**\r\n\r\n## What Is p5.js?\r\n\r\n[p5.js](https://p5js.org/) is a **JavaScript library** that makes it easy to create art and animations with code. It allows you to draw shapes, add colors, animate objects, and respond to user input—all **directly in a web browser**.\r\n\r\n### Why p5.js?\r\n- **Beginner-friendly**: No need to install anything—just start coding in the browser.\r\n- **Interactive & real-time**: See your code change instantly.\r\n- **Great for artists**: Designed for creative projects, not just technical programming.\r\n\r\n## Getting Started: Your First p5.js Sketch\r\n\r\n### Start Coding Now!\r\n\r\nYou don’t need to install anything to try p5.js—just visit the [**p5.js Web Editor**](https://editor.p5js.org/) and start writing code! 🚀\r\n\r\n---\r\n\r\nTo begin, let's create a **simple drawing** using p5.js. Every p5.js project has two important functions:\r\n\r\n1. **`setup()`** – Runs once at the start to set up the canvas.\r\n2. **`draw()`** – Runs repeatedly to update the screen.\r\n\r\nHere’s how to draw a **circle**:\r\n\r\n```javascript title=\"sketch.js\"\r\nfunction setup() {\r\n  createCanvas(400, 400); // Set up a 400x400 pixel canvas\r\n}\r\n\r\nfunction draw() {\r\n  background(220); // Light gray background\r\n  ellipse(200, 200, 100, 100); // Draw a circle at (200, 200) with a size of 100\r\n}\r\n```\r\n\r\n### Breaking It Down:\r\n- **`createCanvas(400, 400)`** – Makes a 400x400 pixel area to draw on.\r\n- **`background(220)`** – Sets a light gray background.\r\n- **`ellipse(200, 200, 100, 100)`** – Draws a circle at `(200, 200)` with a width and height of `100`.\r\n\r\n![1](./1.png)\r\n\r\n:::tip\r\nTry changing the numbers in `ellipse()`—what happens?\r\n:::\r\n\r\n## Understanding Variables: Storing Values\r\n\r\nIn coding, a **variable** is like a container that holds a value. Instead of writing numbers directly, we can store them in variables and use them later.\r\n\r\n```javascript title=\"sketch.js\"\r\nlet circleX = 200; // Store the x position of the circle\r\nlet circleY = 200; // Store the y position of the circle\r\n\r\nfunction setup() {\r\n  createCanvas(400, 400);\r\n}\r\n\r\nfunction draw() {\r\n  background(220);\r\n  ellipse(circleX, circleY, 100, 100); // Use variables to position the circle\r\n}\r\n```\r\n\r\nNow, instead of `200`, we use `circleX` and `circleY`. This makes our code **easier to modify**.\r\n\r\n## Making Things Move: Updating Variables\r\n\r\nTo make something move, we **change a variable** over time. Let’s make the circle move across the screen.\r\n\r\n```javascript title=\"sketch.js\"\r\nlet circleX = 0; // Start at the left side\r\n\r\nfunction setup() {\r\n  createCanvas(400, 400);\r\n}\r\n\r\nfunction draw() {\r\n  background(220);\r\n  ellipse(circleX, 200, 100, 100); // Use circleX for position\r\n\r\n  circleX = circleX + 2; // Increase x position every frame\r\n}\r\n```\r\n\r\n### How It Works:\r\n- The variable `circleX` starts at `0` (left side of the screen).\r\n- Each frame, we **add 2** to `circleX`, moving the circle **to the right**.\r\n- The `draw()` function runs **60 times per second**, making the motion smooth.\r\n\r\n![2](./moving-circle.gif)\r\n\r\n:::caution\r\nWhat happens when `circleX` gets too big? Try printing `circleX` in the console!\r\n:::\r\n\r\nYou can print values to the console using **`console.log()`**.\r\nFor example, in sketch.js, you can log the circleX variable inside the draw() function like this:\r\n\r\n```javascript title=\"sketch.js\"\r\n\r\nfunction draw() {  \r\n  console.log(circleX)\r\n}\r\n\r\n## Making Interactive Art: Using the Mouse\r\n\r\np5.js has built-in variables like `mouseX` and `mouseY` that track the mouse position. Let’s use them to make our circle **follow the mouse**:\r\n\r\n```javascript title=\"sketch.js\"\r\nfunction setup() {\r\n  createCanvas(400, 400);\r\n}\r\n\r\nfunction draw() {\r\n  background(220);\r\n  ellipse(mouseX, mouseY, 100, 100); // The circle follows the mouse\r\n}\r\n```\r\n\r\nNow, the circle will always be **where your mouse is**!\r\n\r\n## Colors and Customization\r\n\r\nYou can customize colors using `fill()` (for shape color) and `stroke()` (for outlines):\r\n\r\n```javascript title=\"sketch.js\"\r\nfunction setup() {\r\n  createCanvas(400, 400);\r\n}\r\n\r\nfunction draw() {\r\n  background(0); // Black background\r\n  fill(255, 0, 0); // Red color\r\n  stroke(255); // White outline\r\n  ellipse(200, 200, 100, 100);\r\n}\r\n```\r\n\r\n- **`fill(r, g, b)`** – Sets the color of shapes (red, green, blue).\r\n- **`stroke(r, g, b)`** – Sets the outline color.\r\n\r\n## What’s Next?\r\n\r\nYou’ve just scratched the surface of **creative coding with p5.js**! Here’s what you can explore next:\r\n\r\n👉 [**Understanding Shapes and Colors in p5.js**](https://www.artecs.org/posts/p5js-shapes-and-colors/)\r\n\r\n:::important\r\nExperiment, play, and have fun! 🎨✨\r\n:::\r\n\r\nPost by: Gabriel Alonso","src/content/post/creative-coding-intro/index.md",[467,49,468,40],"./creative-coding.png","./moving-circle.gif","5070388d7e378dc8",{"html":471,"metadata":472},"\u003Ch2 id=\"what-is-creative-coding\">\u003Ca class=\"not-prose\" href=\"#what-is-creative-coding\">What Is Creative Coding?\u003C/a>\u003C/h2>\n\u003Cp>Creative coding is the practice of using \u003Cstrong>code as a tool for artistic expression\u003C/strong>. Unlike traditional programming, which focuses on solving problems or building applications, creative coding is about \u003Cstrong>making visuals, animations, and interactive art\u003C/strong>.\u003C/p>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./creative-coding.png&#x22;,&#x22;alt&#x22;:&#x22;0&#x22;,&#x22;index&#x22;:0}\">\n\u003Cp>Some things you can create with creative coding:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Digital art and generative patterns\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Animations and interactive sketches\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Music visualizations\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Web-based games and interactive experiments\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"what-is-p5js\">\u003Ca class=\"not-prose\" href=\"#what-is-p5js\">What Is p5.js?\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://p5js.org/\" rel=\"noreferrer noopener\" target=\"_blank\">p5.js\u003C/a> is a \u003Cstrong>JavaScript library\u003C/strong> that makes it easy to create art and animations with code. It allows you to draw shapes, add colors, animate objects, and respond to user input—all \u003Cstrong>directly in a web browser\u003C/strong>.\u003C/p>\n\u003Ch3 id=\"why-p5js\">\u003Ca class=\"not-prose\" href=\"#why-p5js\">Why p5.js?\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Beginner-friendly\u003C/strong>: No need to install anything—just start coding in the browser.\u003C/li>\n\u003Cli>\u003Cstrong>Interactive &#x26; real-time\u003C/strong>: See your code change instantly.\u003C/li>\n\u003Cli>\u003Cstrong>Great for artists\u003C/strong>: Designed for creative projects, not just technical programming.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"getting-started-your-first-p5js-sketch\">\u003Ca class=\"not-prose\" href=\"#getting-started-your-first-p5js-sketch\">Getting Started: Your First p5.js Sketch\u003C/a>\u003C/h2>\n\u003Ch3 id=\"start-coding-now\">\u003Ca class=\"not-prose\" href=\"#start-coding-now\">Start Coding Now!\u003C/a>\u003C/h3>\n\u003Cp>You don’t need to install anything to try p5.js—just visit the \u003Ca href=\"https://editor.p5js.org/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>p5.js Web Editor\u003C/strong>\u003C/a> and start writing code! 🚀\u003C/p>\n\u003Chr>\n\u003Cp>To begin, let’s create a \u003Cstrong>simple drawing\u003C/strong> using p5.js. Every p5.js project has two important functions:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>\u003Ccode>setup()\u003C/code>\u003C/strong> – Runs once at the start to set up the canvas.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>draw()\u003C/code>\u003C/strong> – Runs repeatedly to update the screen.\u003C/li>\n\u003C/ol>\n\u003Cp>Here’s how to draw a \u003Cstrong>circle\u003C/strong>:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Clink rel=\"stylesheet\" href=\"/_astro/ec.x0vho.css\">\u003Cscript type=\"module\" src=\"/_astro/ec.8zarh.js\">\u003C/script>\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">sketch.js\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"javascript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">setup\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">createCanvas\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Set up a 400x400 pixel canvas\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">draw\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">background\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">220\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Light gray background\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">ellipse\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Draw a circle at (200, 200) with a size of 100\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"function setup() {  createCanvas(400, 400); // Set up a 400x400 pixel canvas}function draw() {  background(220); // Light gray background  ellipse(200, 200, 100, 100); // Draw a circle at (200, 200) with a size of 100}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Ch3 id=\"breaking-it-down\">\u003Ca class=\"not-prose\" href=\"#breaking-it-down\">Breaking It Down:\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode>createCanvas(400, 400)\u003C/code>\u003C/strong> – Makes a 400x400 pixel area to draw on.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>background(220)\u003C/code>\u003C/strong> – Sets a light gray background.\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>ellipse(200, 200, 100, 100)\u003C/code>\u003C/strong> – Draws a circle at \u003Ccode>(200, 200)\u003C/code> with a width and height of \u003Ccode>100\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./1.png&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"tip\" class=\"admonition\" data-admonition-type=\"tip\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">tip\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Try changing the numbers in \u003Ccode>ellipse()\u003C/code>—what happens?\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"understanding-variables-storing-values\">\u003Ca class=\"not-prose\" href=\"#understanding-variables-storing-values\">Understanding Variables: Storing Values\u003C/a>\u003C/h2>\n\u003Cp>In coding, a \u003Cstrong>variable\u003C/strong> is like a container that holds a value. Instead of writing numbers directly, we can store them in variables and use them later.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">sketch.js\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"javascript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">let\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> circleX \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">; \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Store the x position of the circle\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">let\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> circleY \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">; \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Store the y position of the circle\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">setup\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">createCanvas\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">draw\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">background\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">220\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">ellipse\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(circleX, circleY, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Use variables to position the circle\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let circleX = 200; // Store the x position of the circlelet circleY = 200; // Store the y position of the circlefunction setup() {  createCanvas(400, 400);}function draw() {  background(220);  ellipse(circleX, circleY, 100, 100); // Use variables to position the circle}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Now, instead of \u003Ccode>200\u003C/code>, we use \u003Ccode>circleX\u003C/code> and \u003Ccode>circleY\u003C/code>. This makes our code \u003Cstrong>easier to modify\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"making-things-move-updating-variables\">\u003Ca class=\"not-prose\" href=\"#making-things-move-updating-variables\">Making Things Move: Updating Variables\u003C/a>\u003C/h2>\n\u003Cp>To make something move, we \u003Cstrong>change a variable\u003C/strong> over time. Let’s make the circle move across the screen.\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">sketch.js\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"javascript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">let\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> circleX \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">0\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">; \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Start at the left side\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">setup\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">createCanvas\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">draw\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">background\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">220\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">ellipse\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(circleX, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Use circleX for position\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">circleX \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">=\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> circleX \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">+\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">2\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">; \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Increase x position every frame\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"let circleX = 0; // Start at the left sidefunction setup() {  createCanvas(400, 400);}function draw() {  background(220);  ellipse(circleX, 200, 100, 100); // Use circleX for position  circleX = circleX + 2; // Increase x position every frame}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Ch3 id=\"how-it-works\">\u003Ca class=\"not-prose\" href=\"#how-it-works\">How It Works:\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>The variable \u003Ccode>circleX\u003C/code> starts at \u003Ccode>0\u003C/code> (left side of the screen).\u003C/li>\n\u003Cli>Each frame, we \u003Cstrong>add 2\u003C/strong> to \u003Ccode>circleX\u003C/code>, moving the circle \u003Cstrong>to the right\u003C/strong>.\u003C/li>\n\u003Cli>The \u003Ccode>draw()\u003C/code> function runs \u003Cstrong>60 times per second\u003C/strong>, making the motion smooth.\u003C/li>\n\u003C/ul>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./moving-circle.gif&#x22;,&#x22;alt&#x22;:&#x22;2&#x22;,&#x22;index&#x22;:0}\">\n\u003Caside aria-label=\"caution\" class=\"admonition\" data-admonition-type=\"caution\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">caution\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>What happens when \u003Ccode>circleX\u003C/code> gets too big? Try printing \u003Ccode>circleX\u003C/code> in the console!\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>You can print values to the console using \u003Cstrong>\u003Ccode>console.log()\u003C/code>\u003C/strong>.\r\nFor example, in sketch.js, you can log the circleX variable inside the draw() function like this:\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">sketch.js\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"javascript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">draw\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">console.\u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">log\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(circleX)\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">## Making Interactive \u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#6F42C1\">Art\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">: Using the Mouse\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">p5.js has built\u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">-in\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> variables like \u003C/span>\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">`mouseX`\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> and \u003C/span>\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">`mouseY`\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> that track the mouse position. Let’s use them to make our circle \u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">**\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">follow the mouse\u003C/span>\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">**\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">:\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">```javascript title=\"sketch.js\"\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">function setup() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">createCanvas(400, 400);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">function draw() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">background(220);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">  \u003C/span>\u003C/span>\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">ellipse(mouseX, mouseY, 100, 100); // The circle follows the mouse\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F1FA8C;--1:#032F62\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"function draw() {  console.log(circleX)}## Making Interactive Art: Using the Mousep5.js has built-in variables like &#x60;mouseX&#x60; and &#x60;mouseY&#x60; that track the mouse position. Let’s use them to make our circle **follow the mouse**:&#x60;&#x60;&#x60;javascript title=&#x22;sketch.js&#x22;function setup() {  createCanvas(400, 400);}function draw() {  background(220);  ellipse(mouseX, mouseY, 100, 100); // The circle follows the mouse}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cp>Now, the circle will always be \u003Cstrong>where your mouse is\u003C/strong>!\u003C/p>\n\u003Ch2 id=\"colors-and-customization\">\u003Ca class=\"not-prose\" href=\"#colors-and-customization\">Colors and Customization\u003C/a>\u003C/h2>\n\u003Cp>You can customize colors using \u003Ccode>fill()\u003C/code> (for shape color) and \u003Ccode>stroke()\u003C/code> (for outlines):\u003C/p>\n\u003Cdiv class=\"expressive-code\">\u003Cfigure class=\"frame has-title\">\u003Cfigcaption class=\"header\">\u003Cspan class=\"title\">sketch.js\u003C/span>\u003C/figcaption>\u003Cpre data-language=\"javascript\">\u003Ccode>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">setup\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">createCanvas\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">400\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\n\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#FF79C6;--1:#BF3441\">function\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\"> \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">draw\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">() {\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">background\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">0\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Black background\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">fill\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">255\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">0\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">0\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// Red color\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">stroke\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">255\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">); \u003C/span>\u003Cspan style=\"--0:#96A1C2;--1:#616972\">// White outline\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan class=\"indent\">  \u003C/span>\u003Cspan style=\"--0:#50FA7B;--1:#6F42C1\">ellipse\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">(\u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">200\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">, \u003C/span>\u003Cspan style=\"--0:#BD93F9;--1:#005CC5\">100\u003C/span>\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">);\u003C/span>\u003C/div>\u003C/div>\u003Cdiv class=\"ec-line\">\u003Cdiv class=\"code\">\u003Cspan style=\"--0:#F8F8F2;--1:#24292E\">}\u003C/span>\u003C/div>\u003C/div>\u003C/code>\u003C/pre>\u003Cdiv class=\"copy\">\u003Cbutton title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"function setup() {  createCanvas(400, 400);}function draw() {  background(0); // Black background  fill(255, 0, 0); // Red color  stroke(255); // White outline  ellipse(200, 200, 100, 100);}\">\u003Cdiv>\u003C/div>\u003C/button>\u003C/div>\u003C/figure>\u003C/div>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ccode>fill(r, g, b)\u003C/code>\u003C/strong> – Sets the color of shapes (red, green, blue).\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ccode>stroke(r, g, b)\u003C/code>\u003C/strong> – Sets the outline color.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"whats-next\">\u003Ca class=\"not-prose\" href=\"#whats-next\">What’s Next?\u003C/a>\u003C/h2>\n\u003Cp>You’ve just scratched the surface of \u003Cstrong>creative coding with p5.js\u003C/strong>! Here’s what you can explore next:\u003C/p>\n\u003Cp>👉 \u003Ca href=\"https://www.artecs.org/posts/p5js-shapes-and-colors/\" rel=\"noreferrer noopener\" target=\"_blank\">\u003Cstrong>Understanding Shapes and Colors in p5.js\u003C/strong>\u003C/a>\u003C/p>\n\u003Caside aria-label=\"important\" class=\"admonition\" data-admonition-type=\"important\">\u003Cp class=\"admonition-title\" aria-hidden=\"true\">important\u003C/p>\u003Cdiv class=\"admonition-content\">\u003Cp>Experiment, play, and have fun! 🎨✨\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Post by: Gabriel Alonso\u003C/p>",{"headings":473,"imagePaths":505,"frontmatter":506},[474,477,480,483,486,489,492,495,498,501,504],{"depth":57,"slug":475,"text":476},"what-is-creative-coding","What Is Creative Coding?",{"depth":57,"slug":478,"text":479},"what-is-p5js","What Is p5.js?",{"depth":61,"slug":481,"text":482},"why-p5js","Why p5.js?",{"depth":57,"slug":484,"text":485},"getting-started-your-first-p5js-sketch","Getting Started: Your First p5.js Sketch",{"depth":61,"slug":487,"text":488},"start-coding-now","Start Coding Now!",{"depth":61,"slug":490,"text":491},"breaking-it-down","Breaking It Down:",{"depth":57,"slug":493,"text":494},"understanding-variables-storing-values","Understanding Variables: Storing Values",{"depth":57,"slug":496,"text":497},"making-things-move-updating-variables","Making Things Move: Updating Variables",{"depth":61,"slug":499,"text":500},"how-it-works","How It Works:",{"depth":57,"slug":502,"text":503},"colors-and-customization","Colors and Customization",{"depth":57,"slug":77,"text":78},[467,49,468],{"title":456,"description":457,"publishDate":507,"category":209,"tags":508,"coverImage":509,"ogImage":40,"readingTime":398},"13 Feb 2025",[461,462],{"src":40,"alt":459}]